const sqlite3 = require('sqlite3').verbose();
const path = require('path');

// –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const dbPath = path.join(__dirname, 'database.sqlite');

console.log('üîß –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ points –∫ —Å–æ–±—ã—Ç–∏—è–º...');
console.log('üìÅ –ü—É—Ç—å –∫ –ë–î:', dbPath);

const db = new sqlite3.Database(dbPath, (err) => {
  if (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err.message);
    return;
  }
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
db.all("PRAGMA table_info(events)", (err, columns) => {
  if (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã:', err);
    return;
  }
  
  console.log('üìã –¢–µ–∫—É—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã events:');
  columns.forEach(col => console.log(`  - ${col.name}: ${col.type}`));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª–µ points
  const hasPointsColumn = columns.some(col => col.name === 'points');
  
  if (hasPointsColumn) {
    console.log('‚úÖ –ü–æ–ª–µ points —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è —Å –±–∞–ª–ª–∞–º–∏
    updateEventsWithPoints();
  } else {
    console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ points...');
    
    db.run('ALTER TABLE events ADD COLUMN points INTEGER DEFAULT 0', (err) => {
      if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è points:', err);
        return;
      }
      console.log('‚úÖ –ü–æ–ª–µ points –¥–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è —Å –±–∞–ª–ª–∞–º–∏
      updateEventsWithPoints();
    });
  }
});

function updateEventsWithPoints() {
  console.log('üéØ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è —Å –±–∞–ª–ª–∞–º–∏...');
  
  // –ù–∞–∑–Ω–∞—á–∞–µ–º –±–∞–ª–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å–æ–±—ã—Ç–∏—è–º
  const eventUpdates = [
    { title: '–•–∞–∫–∞—Ç–æ–Ω –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é', points: 40 },
    { title: '–®–∫–æ–ª—å–Ω–∞—è —è—Ä–º–∞—Ä–∫–∞ —Ç–∞–ª–∞–Ω—Ç–æ–≤', points: 25 },
    { title: '–î–µ–±–∞—Ç—ã —Å—Ç–∞—Ä—à–µ–∫–ª–∞—Å—Å–Ω–∏–∫–æ–≤', points: 35 },
    { title: '–≠–∫–æ-–∫–≤–µ—Å—Ç', points: 30 },
    { title: '–ö—É–ª–∏–Ω–∞—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å', points: 20 },
    { title: '–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞', points: 25 },
    { title: '–û–ª–∏–º–ø–∏–∞–¥–∞ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ', points: 50 },
    { title: '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è', points: 30 },
    { title: '–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –∫–æ–Ω–∫—É—Ä—Å', points: 35 }
  ];
  
  let updatedCount = 0;
  
  eventUpdates.forEach((update, index) => {
    db.run(
      'UPDATE events SET points = ? WHERE title LIKE ? AND (points = 0 OR points IS NULL)',
      [update.points, `%${update.title}%`],
      function(err) {
        if (err) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è "${update.title}":`, err);
        } else if (this.changes > 0) {
          console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ "${update.title}": ${update.points} –±–∞–ª–ª–æ–≤`);
          updatedCount++;
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if (index === eventUpdates.length - 1) {
          setTimeout(() => {
            console.log(`\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: ${updatedCount}`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            db.all('SELECT id, title, points FROM events ORDER BY id', (err, rows) => {
              if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π:', err);
              } else {
                console.log('\nüìä –¢–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è —Å –±–∞–ª–ª–∞–º–∏:');
                rows.forEach(row => {
                  console.log(`  - ${row.title}: ${row.points || 0} –±–∞–ª–ª–æ–≤`);
                });
              }
              
              db.close((err) => {
                if (err) {
                  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î:', err);
                } else {
                  console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞');
                }
              });
            });
          }, 100);
        }
      }
    );
  });
}