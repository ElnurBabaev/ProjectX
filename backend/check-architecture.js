#!/usr/bin/env node

require('dotenv').config();
const path = require('path');

console.log('üîç –ê–ù–ê–õ–ò–ó –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –ü–†–û–ï–ö–¢–ê');
console.log('=====================================');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
console.log('\nüìã –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:');
console.log(`NODE_ENV: ${process.env.NODE_ENV || '–Ω–µ –∑–∞–¥–∞–Ω–æ'}`);
console.log(`PORT: ${process.env.PORT || '5000'}`);
console.log(`DATABASE_TYPE: ${process.env.DATABASE_TYPE || 'postgresql'}`);
console.log(`DATABASE_URL: ${process.env.DATABASE_URL ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù!'}`);
console.log(`DB_HOST: ${process.env.DB_HOST || '–Ω–µ –∑–∞–¥–∞–Ω–æ'}`);
console.log(`DB_PORT: ${process.env.DB_PORT || '–Ω–µ –∑–∞–¥–∞–Ω–æ'}`);
console.log(`DB_NAME: ${process.env.DB_NAME || '–Ω–µ –∑–∞–¥–∞–Ω–æ'}`);
console.log(`DB_USER: ${process.env.DB_USER || '–Ω–µ –∑–∞–¥–∞–Ω–æ'}`);
console.log(`JWT_SECRET: ${process.env.JWT_SECRET ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù!'}`);
console.log(`FRONTEND_URL: ${process.env.FRONTEND_URL || '–Ω–µ –∑–∞–¥–∞–Ω–æ'}`);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤
console.log('\nüìÅ –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê:');

const fs = require('fs');

const checkFiles = [
  'server.js',
  'models/User.js',
  'models/Event.js',
  'models/Product.js', 
  'models/Achievement.js',
  'models/index.js',
  'routes/auth.js',
  'routes/events.js',
  'routes/products.js',
  'routes/achievements.js',
  'routes/admin.js',
  'middleware/auth.js',
  'config/database.js'
];

checkFiles.forEach(file => {
  const filePath = path.join(__dirname, file);
  const exists = fs.existsSync(filePath);
  console.log(`${exists ? '‚úÖ' : '‚ùå'} ${file}`);
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL
console.log('\nüóÑÔ∏è  –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:');

async function checkPostgreSQL() {
  try {
    const { Pool } = require('pg');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–±–æ DATABASE_URL, –ª–∏–±–æ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const config = process.env.DATABASE_URL ? 
      { connectionString: process.env.DATABASE_URL } : 
      {
        host: process.env.DB_HOST,
        port: process.env.DB_PORT,
        database: process.env.DB_NAME,
        user: process.env.DB_USER,
        password: process.env.DB_PASSWORD
      };
    
    if (process.env.NODE_ENV === 'production') {
      config.ssl = { rejectUnauthorized: false };
    }
    
    const pool = new Pool(config);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const client = await pool.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
    const tablesResult = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name
    `);
    
    const tables = tablesResult.rows.map(row => row.table_name);
    console.log('üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:', tables.join(', '));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
    for (const table of tables) {
      try {
        const countResult = await client.query(`SELECT COUNT(*) as count FROM ${table}`);
        console.log(`   üìà ${table}: ${countResult.rows[0].count} –∑–∞–ø–∏—Å–µ–π`);
      } catch (err) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∑–∞–ø–∏—Å–µ–π –≤ ${table}: ${err.message}`);
      }
    }
    
    client.release();
    await pool.end();
    
  } catch (err) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL:', err.message);
    console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ .env —Ñ–∞–π–ª–µ');
    console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω');
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
console.log('\nüì¶ –ó–ê–í–ò–°–ò–ú–û–°–¢–ò:');
try {
  const packageJson = JSON.parse(fs.readFileSync(path.join(__dirname, 'package.json'), 'utf8'));
  const deps = Object.keys(packageJson.dependencies || {});
  console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:', deps.length);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è PostgreSQL
  const requiredPackages = ['express', 'pg', 'bcryptjs', 'jsonwebtoken', 'cors'];
  requiredPackages.forEach(pkg => {
    console.log(`${deps.includes(pkg) ? '‚úÖ' : '‚ùå'} ${pkg}`);
  });
} catch (e) {
  console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å package.json');
}

console.log('\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');

if (!process.env.JWT_SECRET || process.env.JWT_SECRET === 'your-super-secret-jwt-key-change-this-in-production-2024') {
  console.log('‚ö†Ô∏è  –°–º–µ–Ω–∏—Ç–µ JWT_SECRET –Ω–∞ production!');
}

if (!process.env.DATABASE_URL && (!process.env.DB_HOST || !process.env.DB_NAME || !process.env.DB_PASSWORD)) {
  console.log('‚ö†Ô∏è  –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL –≤ .env —Ñ–∞–π–ª–µ!');
  console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–∫–∞–∑–∞–Ω—ã DB_HOST, DB_NAME, DB_USER –∏ DB_PASSWORD');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É PostgreSQL
checkPostgreSQL().then(() => {
  console.log('\n‚ú® –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');
}).catch(err => {
  console.log('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err.message);
  console.log('\n‚ú® –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏!');
});