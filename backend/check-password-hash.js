#!/usr/bin/env node

const db = require('./config/database-sqlite');
const bcrypt = require('bcryptjs');

async function checkPasswordHash() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ö–µ—à –ø–∞—Ä–æ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    const result = await db.query('SELECT login, password FROM users WHERE login = ?', ['admin']);
    
    if (result.rows.length === 0) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    const user = result.rows[0];
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.login}`);
    console.log(`üîê –•–µ—à –≤ –ë–î: ${user.password}`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–∞—Ä–æ–ª–∏
    const passwords = ['admin', 'admin123', 'password', '123456'];
    
    for (const testPassword of passwords) {
      console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é –ø–∞—Ä–æ–ª—å: "${testPassword}"`);
      const isValid = await bcrypt.compare(testPassword, user.password);
      console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${isValid ? '–í–ï–†–ù–´–ô' : '–Ω–µ–≤–µ—Ä–Ω—ã–π'}`);
      
      if (isValid) {
        console.log(`üéØ –ù–ê–ô–î–ï–ù –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–ê–†–û–õ–¨: "${testPassword}"`);
        break;
      }
    }
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

checkPasswordHash();