const http = require('http');
const fs = require('fs');
const FormData = require('form-data');

async function createAndUploadTestImage() {
  try {
    console.log('üé® –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...');
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ SVG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const testSvg = `<svg width="400" height="300" xmlns="http://www.w3.org/2000/svg">
      <rect width="100%" height="100%" fill="#f0f9ff"/>
      <rect x="50" y="50" width="300" height="200" fill="#1e40af" rx="10"/>
      <text x="200" y="130" text-anchor="middle" font-family="Arial" font-size="24" fill="white">–¢–ï–°–¢–û–í–û–ï</text>
      <text x="200" y="160" text-anchor="middle" font-family="Arial" font-size="24" fill="white">–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï</text>
      <text x="200" y="200" text-anchor="middle" font-family="Arial" font-size="16" fill="#93c5fd">–ó–∞–≥—Ä—É–∂–µ–Ω–æ —á–µ—Ä–µ–∑ API</text>
    </svg>`;
    
    fs.writeFileSync('test-event-image.svg', testSvg);
    
    console.log('üîë –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    const token = await getAuthToken();
    
    if (!token) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω');
      return;
    }
    
    console.log('üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
    const form = new FormData();
    form.append('image', fs.createReadStream('test-event-image.svg'));
    
    const options = {
      hostname: 'localhost',
      port: 5000,
      path: '/api/upload/upload-image',
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        ...form.getHeaders()
      }
    };

    const req = http.request(options, (res) => {
      let data = '';
      res.setEncoding('utf8');
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          const response = JSON.parse(data);
          console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!');
          console.log('üñºÔ∏è  URL:', `http://localhost:5000${response.imageUrl}`);
          console.log('üìÇ –ü—É—Ç—å –¥–ª—è –ë–î:', response.imageUrl);
          console.log('üìè –†–∞–∑–º–µ—Ä:', response.size, '–±–∞–π—Ç');
        } catch (e) {
          console.log('‚ùå –û—à–∏–±–∫–∞:', data);
        }
        
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        fs.unlinkSync('test-event-image.svg');
      });
    });

    req.on('error', (e) => {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${e.message}`);
      fs.unlinkSync('test-event-image.svg');
    });

    form.pipe(req);
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

async function getAuthToken() {
  return new Promise((resolve) => {
    const loginData = JSON.stringify({
      login: 'admin',
      password: 'admin'
    });

    const options = {
      hostname: 'localhost',
      port: 5000,
      path: '/api/auth/login',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(loginData)
      }
    };

    const req = http.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => data += chunk);
      res.on('end', () => {
        try {
          const response = JSON.parse(data);
          resolve(response.token);
        } catch (e) {
          resolve(null);
        }
      });
    });

    req.on('error', () => resolve(null));
    req.write(loginData);
    req.end();
  });
}

createAndUploadTestImage();