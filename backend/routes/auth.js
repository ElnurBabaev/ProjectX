const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const { body, validationResult } = require('express-validator');
const db = require('../config/database');
const { auth } = require('../middleware/auth');

const router = express.Router();

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
const JWT_SECRET = process.env.JWT_SECRET || 'dev_secret_change_me';
const JWT_EXPIRE = process.env.JWT_EXPIRE || '7d';

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–µ–∑ email
router.post('/register', [
  body('login').isLength({ min: 3, max: 50 }).withMessage('–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤'),
  body('password').isLength({ min: 6 }).withMessage('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤'),
  body('firstName').notEmpty().withMessage('–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'),
  body('lastName').notEmpty().withMessage('–§–∞–º–∏–ª–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞'),
  body('classGrade').isInt({ min: 5, max: 11 }).withMessage('–ö–ª–∞—Å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 5 –¥–æ 11'),
  body('classLetter').isIn(['–ê', '–ë', '–í', '–ì']).withMessage('–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ê, –ë, –í –∏–ª–∏ –ì')
], async (req, res) => {
  try {
    console.log('üìù –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:', req.body);
    
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      console.log('‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', errors.array());
      return res.status(400).json({ errors: errors.array() });
    }

    const { login, password, firstName, lastName, classGrade, classLetter } = req.body;
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é:', { login, firstName, lastName, classGrade, classLetter });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –ø–æ –ª–æ–≥–∏–Ω—É
    const existingUser = await db.query(
      'SELECT id FROM users WHERE login = ?',
      [login]
    );
    
    if (existingUser.rows.length > 0) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', login);
      return res.status(400).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ');

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const hashedPassword = await bcrypt.hash(password, 12);
    console.log('‚úÖ –ü–∞—Ä–æ–ª—å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω');

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    const result = await db.query(
      'INSERT INTO users (login, password, first_name, last_name, class_grade, class_letter) VALUES (?, ?, ?, ?, ?, ?)',
      [login, hashedPassword, firstName, lastName, classGrade, classLetter]
    );

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å ID:', result.insertId);

    const userId = result.insertId;

    const token = jwt.sign(
      { userId },
      JWT_SECRET,
      { expiresIn: JWT_EXPIRE }
    );

    res.status(201).json({
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
      token,
      user: {
        id: userId,
        login,
        first_name: firstName,
        last_name: lastName,
        full_name: `${firstName} ${lastName}`,
        class: `${classGrade}${classLetter}`,
        class_grade: classGrade,
        class_letter: classLetter,
        role: 'student'
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' });
  }
});

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –¥–ª—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
router.post('/login', [
  body('login').isLength({ min: 3, max: 50 }).withMessage('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω'),
  body('password').notEmpty().withMessage('–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
], async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { login, password } = req.body;
    console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', { login, hasPassword: !!password });

    const result = await db.query(
      'SELECT * FROM users WHERE login = ?',
      [login]
    );
    
    const user = result.rows[0];
    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', login);
      return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', { id: user.id, login: user.login, hasHash: !!user.password });

    const isValidPassword = await bcrypt.compare(password, user.password);
    if (!isValidPassword) {
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', login);
      return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }

    console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { id: user.id, login: user.login });

    const token = jwt.sign(
      { userId: user.id },
      JWT_SECRET,
      { expiresIn: JWT_EXPIRE }
    );

    res.json({
      message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞',
      token,
      user: {
        id: user.id,
        login: user.login,
        first_name: user.first_name,
        last_name: user.last_name,
        full_name: `${user.first_name} ${user.last_name}`,
        class: `${user.class_grade}${user.class_letter}`,
        class_grade: user.class_grade,
        class_letter: user.class_letter,
        role: user.role,
        isAdmin: user.role === 'admin',
        avatar_url: user.avatar_url,
        points: user.points || 0,
        total_earned_points: user.total_earned_points || 0
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
router.get('/profile', auth, async (req, res) => {
  try {
    const result = await db.query(
      'SELECT id, login, first_name, last_name, class_grade, class_letter, role, avatar_url, points, total_earned_points, created_at FROM users WHERE id = ?',
      [req.user.id]
    );
    
    const user = result.rows[0];
    if (!user) {
      return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const achievementsResult = await db.query(
      'SELECT COUNT(*) as count FROM user_achievements WHERE user_id = ?',
      [user.id]
    );
    
    const achievementsCount = achievementsResult.rows[0].count;

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const eventsResult = await db.query(
      'SELECT COUNT(*) as count FROM event_registrations WHERE user_id = ?',
      [user.id]
    );
    
    const eventsCount = eventsResult.rows[0].count;

    res.json({
      user: {
        id: user.id,
        login: user.login,
        first_name: user.first_name,
        last_name: user.last_name,
        full_name: `${user.first_name} ${user.last_name}`,
        class: `${user.class_grade}${user.class_letter}`,
        class_grade: user.class_grade,
        class_letter: user.class_letter,
        role: user.role,
        isAdmin: user.role === 'admin',
        avatar_url: user.avatar_url,
        points: user.points || 0,
        total_earned_points: user.total_earned_points || 0,
        achievements_count: achievementsCount,
        events_count: eventsCount,
        created_at: user.created_at
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
router.post('/change-password', [
  auth,
  body('currentPassword').notEmpty().withMessage('–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'),
  body('newPassword').isLength({ min: 6 }).withMessage('–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤')
], async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { currentPassword, newPassword } = req.body;

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const result = await db.query(
      'SELECT password FROM users WHERE id = ?',
      [req.user.id]
    );
    
    const user = result.rows[0];
    if (!user) {
      return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const isValidPassword = await bcrypt.compare(currentPassword, user.password);
    if (!isValidPassword) {
      return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å' });
    }

    // –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
    const hashedNewPassword = await bcrypt.hash(newPassword, 12);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
    await db.query(
      'UPDATE users SET password = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?',
      [hashedNewPassword, req.user.id]
    );

    res.json({ message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.put('/profile', [
  auth,
  body('first_name').optional().notEmpty().withMessage('–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'),
  body('last_name').optional().notEmpty().withMessage('–§–∞–º–∏–ª–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π'),
  body('avatar_id').optional().isString().withMessage('ID –∞–≤–∞—Ç–∞—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π')
], async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { first_name, last_name, class_grade, class_letter, avatar_id } = req.body;
    const userId = req.user.id;

    const updates = [];
    const params = [];

    if (first_name) {
      updates.push('first_name = ?');
      params.push(first_name);
    }
    if (last_name) {
      updates.push('last_name = ?');
      params.push(last_name);
    }
    if (class_grade !== undefined) {
      updates.push('class_grade = ?');
      params.push(class_grade);
    }
    if (class_letter !== undefined) {
      updates.push('class_letter = ?');
      params.push(class_letter);
    }
    if (avatar_id !== undefined) {
      updates.push('avatar_url = ?');
      params.push(avatar_id); // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–≤–∞—Ç–∞—Ä–∞ –≤ –ø–æ–ª–µ avatar_url
    }

    if (updates.length === 0) {
      return res.status(400).json({ message: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' });
    }

    updates.push('updated_at = CURRENT_TIMESTAMP');
    params.push(userId);

    await db.query(
      `UPDATE users SET ${updates.join(', ')} WHERE id = ?`,
      params
    );

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const result = await db.query(
      'SELECT id, login, first_name, last_name, class_grade, class_letter, role, avatar_url, created_at FROM users WHERE id = ?',
      [userId]
    );

    res.json({ 
      message: '–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω', 
      user: result.rows[0] 
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

module.exports = router;