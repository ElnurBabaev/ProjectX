const database = require('../config/database-sqlite');

async function addTestAchievements() {
  try {
    console.log('üèÜ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    const studentsResult = await database.query('SELECT id FROM users WHERE role = "student"');
    const students = studentsResult.rows;

    if (students.length === 0) {
      console.log('‚ùå –°—Ç—É–¥–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const achievementsResult = await database.query('SELECT id, points FROM achievements');
    const achievements = achievementsResult.rows;

    if (achievements.length === 0) {
      console.log('‚ùå –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${students.length} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ ${achievements.length} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π`);

    // –î–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º
    for (const student of students) {
      // –°–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ (–æ—Ç 1 –¥–æ 3)
      const numAchievements = Math.floor(Math.random() * 3) + 1;
      
      // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ numAchievements
      const shuffledAchievements = achievements.sort(() => 0.5 - Math.random());
      const selectedAchievements = shuffledAchievements.slice(0, numAchievements);

      for (const achievement of selectedAchievements) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const existingResult = await database.query(
            'SELECT id FROM user_achievements WHERE user_id = ? AND achievement_id = ?',
            [student.id, achievement.id]
          );

          if (existingResult.rows.length === 0) {
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            await database.query(
              'INSERT INTO user_achievements (user_id, achievement_id, awarded_at) VALUES (?, ?, ?)',
              [student.id, achievement.id, new Date().toISOString()]
            );
            
            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${student.id} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ ${achievement.id} (${achievement.points} –æ—á–∫–æ–≤)`);
          }
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
          if (!error.message.includes('UNIQUE constraint failed')) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', error);
          }
        }
      }
    }

    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const statsResult = await database.query(`
      SELECT 
        u.id,
        u.first_name,
        u.last_name,
        u.class_grade,
        u.class_letter,
        COUNT(ua.achievement_id) as achievements_count,
        COALESCE(SUM(a.points), 0) as total_points
      FROM users u
      LEFT JOIN user_achievements ua ON u.id = ua.user_id
      LEFT JOIN achievements a ON ua.achievement_id = a.id
      WHERE u.role = 'student'
      GROUP BY u.id, u.first_name, u.last_name, u.class_grade, u.class_letter
      ORDER BY total_points DESC
    `);

    console.log('\nüèÜ –†–ï–ô–¢–ò–ù–ì –£–ß–ï–ù–ò–ö–û–í:');
    console.log('='.repeat(60));
    statsResult.rows.forEach((student, index) => {
      console.log(`${index + 1}. ${student.first_name} ${student.last_name} (${student.class_grade}${student.class_letter}) - ${student.total_points} –æ—á–∫–æ–≤, ${student.achievements_count} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π`);
    });

    console.log('\n‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  addTestAchievements()
    .then(() => {
      process.exit(0);
    })
    .catch((error) => {
      console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = { addTestAchievements };