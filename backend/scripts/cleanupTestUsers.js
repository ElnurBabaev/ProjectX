const database = require('../config/database-sqlite');

async function cleanupTestUsers() {
  try {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n');

    // –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–ø–æ –ª–æ–≥–∏–Ω—É)
    const testUserLogins = [
      'test_student1',
      'test_student2', 
      'test_student3',
      'test_student4',
      'test_student5',
      'elnur',
      'elnur1'
    ];

    console.log('üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:');
    for (const login of testUserLogins) {
      const user = await database.query('SELECT id, login, first_name, last_name FROM users WHERE login = ?', [login]);
      if (user.rows.length > 0) {
        const u = user.rows[0];
        console.log(`- ${u.login}: ${u.first_name} ${u.last_name} (ID: ${u.id})`);
      }
    }

    const readline = require('readline');
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });

    rl.question('\n‚ùì –£–¥–∞–ª–∏—Ç—å —ç—Ç–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π? (y/N): ', async (answer) => {
      if (answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes') {
        try {
          console.log('\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
          
          for (const login of testUserLogins) {
            // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            const userResult = await database.query('SELECT id FROM users WHERE login = ?', [login]);
            if (userResult.rows.length > 0) {
              const userId = userResult.rows[0].id;
              
              // –£–¥–∞–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              await database.query('DELETE FROM user_achievements WHERE user_id = ?', [userId]);
              
              // –£–¥–∞–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
              await database.query('DELETE FROM event_registrations WHERE user_id = ?', [userId]);
              
              // –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑—ã
              await database.query('DELETE FROM order_items WHERE order_id IN (SELECT id FROM orders WHERE user_id = ?)', [userId]);
              await database.query('DELETE FROM orders WHERE user_id = ?', [userId]);
              
              // –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              await database.query('DELETE FROM users WHERE login = ?', [login]);
              
              console.log(`‚úÖ –£–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${login}`);
            }
          }

          console.log('\nüéâ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!');
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          const remainingUsers = await database.query(`
            SELECT login, first_name, last_name, class_grade, class_letter, role 
            FROM users 
            ORDER BY role DESC, last_name
          `);
          
          console.log('\n=== –û–°–¢–ê–í–®–ò–ï–°–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ===');
          remainingUsers.rows.forEach(user => {
            console.log(`${user.login}: ${user.first_name} ${user.last_name} (${user.class_grade}${user.class_letter}) - ${user.role}`);
          });

        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', error);
        }
      } else {
        console.log('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.');
      }
      
      rl.close();
      process.exit(0);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    process.exit(1);
  }
}

cleanupTestUsers();