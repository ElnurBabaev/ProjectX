const database = require('../config/database-sqlite');

async function debugRankings() {
  try {
    console.log('üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–∞...\n');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ
    console.log('=== –î–û–°–¢–ò–ñ–ï–ù–ò–Ø –í –°–ò–°–¢–ï–ú–ï ===');
    const achievements = await database.query('SELECT id, title, points FROM achievements ORDER BY id');
    achievements.rows.forEach(achievement => {
      console.log(`${achievement.id}: ${achievement.title} (${achievement.points} –æ—á–∫–æ–≤)`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    console.log('\n=== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø ===');
    const userAchievements = await database.query(`
      SELECT 
        ua.user_id,
        u.first_name,
        u.last_name,
        ua.achievement_id,
        a.title,
        a.points,
        ua.awarded_at
      FROM user_achievements ua
      JOIN users u ON ua.user_id = u.id
      JOIN achievements a ON ua.achievement_id = a.id
      ORDER BY ua.user_id, ua.achievement_id
    `);
    
    userAchievements.rows.forEach(ua => {
      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ua.user_id} (${ua.first_name} ${ua.last_name}): –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "${ua.title}" (${ua.points} –æ—á–∫–æ–≤)`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç –æ—á–∫–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    console.log('\n=== –†–ê–°–ß–ï–¢ –û–ß–ö–û–í –ü–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú ===');
    const pointsCalc = await database.query(`
      SELECT 
        u.id,
        u.first_name,
        u.last_name,
        u.class_grade,
        u.class_letter,
        GROUP_CONCAT(a.title || ' (' || a.points || ')') as achievements_list,
        COUNT(CASE WHEN ua.achievement_id IS NOT NULL THEN 1 END) as achievements_count,
        COALESCE(SUM(a.points), 0) as total_points
      FROM users u
      LEFT JOIN user_achievements ua ON u.id = ua.user_id
      LEFT JOIN achievements a ON ua.achievement_id = a.id
      WHERE u.role = 'student'
      GROUP BY u.id, u.first_name, u.last_name, u.class_grade, u.class_letter
      ORDER BY total_points DESC
    `);

    pointsCalc.rows.forEach((user, index) => {
      console.log(`\n${index + 1}. ${user.first_name} ${user.last_name} (${user.class_grade}${user.class_letter})`);
      console.log(`   –í—Å–µ–≥–æ –æ—á–∫–æ–≤: ${user.total_points}`);
      console.log(`   –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: ${user.achievements_count}`);
      console.log(`   –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: ${user.achievements_list || '–ù–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π'}`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—Ç –∂–µ –∑–∞–ø—Ä–æ—Å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç API —Ä–µ–π—Ç–∏–Ω–≥–∞
    console.log('\n=== –ó–ê–ü–†–û–° API –†–ï–ô–¢–ò–ù–ì–ê ===');
    const apiResult = await database.query(`
      SELECT 
        u.id,
        u.first_name,
        u.last_name,
        u.class_grade,
        u.class_letter,
        COALESCE(SUM(a.points), 0) as total_points,
        COUNT(CASE WHEN ua.achievement_id IS NOT NULL THEN 1 END) as achievements_count,
        RANK() OVER (ORDER BY COALESCE(SUM(a.points), 0) DESC) as rank_position
      FROM users u
      LEFT JOIN user_achievements ua ON u.id = ua.user_id
      LEFT JOIN achievements a ON ua.achievement_id = a.id
      WHERE u.role = 'student'
      GROUP BY u.id, u.first_name, u.last_name, u.class_grade, u.class_letter
      ORDER BY total_points DESC, u.last_name ASC
    `);

    console.log('\n–†–µ–∑—É–ª—å—Ç–∞—Ç API –∑–∞–ø—Ä–æ—Å–∞:');
    apiResult.rows.forEach(user => {
      console.log(`${user.rank_position}. ${user.first_name} ${user.last_name} - ${user.total_points} –æ—á–∫–æ–≤, ${user.achievements_count} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
  } finally {
    process.exit(0);
  }
}

debugRankings();