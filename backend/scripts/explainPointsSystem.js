const database = require('../config/database-sqlite');

async function explainPointsSystem() {
  try {
    console.log('üìä –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–´ –û–ß–ö–û–í –ò –ë–ê–õ–õ–û–í\n');

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('üîç –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶–´ USERS:');
    const userSchema = await database.query('PRAGMA table_info(users)');
    userSchema.rows.forEach(col => {
      if (col.name.includes('point') || col.name.includes('balance') || col.name.includes('score')) {
        console.log(`- ${col.name}: ${col.type} (${col.notnull ? 'NOT NULL' : 'NULL'})`);
      }
    });

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –∏—Ö –æ—á–∫–∏
    console.log('\nüèÜ –°–ò–°–¢–ï–ú–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô (ACHIEVEMENTS):');
    const achievements = await database.query('SELECT id, title, points, type FROM achievements ORDER BY points DESC');
    console.log('–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞—á–∏—Å–ª—è—é—Ç –û–ß–ö–ò (points):');
    achievements.rows.forEach(a => {
      console.log(`- "${a.title}": ${a.points} –æ—á–∫–æ–≤ (—Ç–∏–ø: ${a.type})`);
    });

    // 3. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    console.log('\nüíØ –û–ß–ö–ò –ó–ê –î–û–°–¢–ò–ñ–ï–ù–ò–Ø (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ):');
    const userPoints = await database.query(`
      SELECT 
        u.first_name,
        u.last_name,
        COALESCE(SUM(a.points), 0) as achievement_points,
        COUNT(CASE WHEN ua.achievement_id IS NOT NULL THEN 1 END) as achievements_count
      FROM users u
      LEFT JOIN user_achievements ua ON u.id = ua.user_id
      LEFT JOIN achievements a ON ua.achievement_id = a.id
      WHERE u.role = 'student'
      GROUP BY u.id, u.first_name, u.last_name
      ORDER BY achievement_points DESC
      LIMIT 5
    `);

    userPoints.rows.forEach((user, index) => {
      console.log(`${index + 1}. ${user.first_name} ${user.last_name}: ${user.achievement_points} –æ—á–∫–æ–≤ –æ—Ç ${user.achievements_count} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π`);
    });

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–∞–ª–ª–æ–≤
    console.log('\nüîç –ü–û–ò–°–ö –î–†–£–ì–ò–• –°–ò–°–¢–ï–ú –ë–ê–õ–õ–û–í:');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –Ω–∞ –Ω–∞–ª–∏—á–∏–µ "points", "balance", "score"
    const tables = await database.query("SELECT name FROM sqlite_master WHERE type='table'");
    
    for (const table of tables.rows) {
      const schema = await database.query(`PRAGMA table_info(${table.name})`);
      const pointsColumns = schema.rows.filter(col => 
        col.name.toLowerCase().includes('point') || 
        col.name.toLowerCase().includes('balance') || 
        col.name.toLowerCase().includes('score') ||
        col.name.toLowerCase().includes('money') ||
        col.name.toLowerCase().includes('credit')
      );
      
      if (pointsColumns.length > 0) {
        console.log(`–¢–∞–±–ª–∏—Ü–∞ "${table.name}":`);
        pointsColumns.forEach(col => {
          console.log(`  - ${col.name}: ${col.type}`);
        });
      }
    }

    console.log('\nüìù –í–´–í–û–î:');
    console.log('–í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–∞ –û–ß–ö–û–í –ó–ê –î–û–°–¢–ò–ñ–ï–ù–ò–Ø.');
    console.log('–†–µ–π—Ç–∏–Ω–≥ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Å—É–º–º–µ –æ—á–∫–æ–≤ –æ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.');
    console.log('–ö–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∏–º–µ–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤.');
    console.log('–£—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö -> –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π -> –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ -> –ø–æ–∑–∏—Ü–∏—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    process.exit(0);
  }
}

explainPointsSystem();