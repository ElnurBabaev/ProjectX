const database = require('../config/database-sqlite');
const path = require('path');

async function initDatabase() {
  try {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite...');

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    await database.query(`
      CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        login TEXT UNIQUE NOT NULL,
        password TEXT NOT NULL,
        first_name TEXT NOT NULL,
        last_name TEXT NOT NULL,
        class_grade INTEGER NOT NULL CHECK (class_grade >= 5 AND class_grade <= 11),
        class_letter TEXT NOT NULL CHECK (class_letter IN ('–ê', '–ë', '–í', '–ì')),
        role TEXT DEFAULT 'student' CHECK(role IN ('student', 'admin')),
        avatar_url TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–±—ã—Ç–∏–π
    await database.query(`
      CREATE TABLE IF NOT EXISTS events (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT NOT NULL,
        description TEXT,
        start_date DATETIME NOT NULL,
        end_date DATETIME,
        location TEXT,
        max_participants INTEGER,
        current_participants INTEGER DEFAULT 0,
        image_url TEXT,
        status TEXT DEFAULT 'upcoming' CHECK(status IN ('upcoming', 'ongoing', 'completed', 'cancelled')),
        created_by INTEGER REFERENCES users(id),
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    await database.query(`
      CREATE TABLE IF NOT EXISTS event_registrations (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        event_id INTEGER NOT NULL REFERENCES events(id) ON DELETE CASCADE,
        user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        status TEXT DEFAULT 'registered' CHECK(status IN ('registered', 'attended', 'missed', 'cancelled')),
        registered_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(event_id, user_id)
      )
    `);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    await database.query(`
      CREATE TABLE IF NOT EXISTS achievements (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT NOT NULL,
        description TEXT,
        icon TEXT,
        type TEXT DEFAULT 'participation' CHECK(type IN ('participation', 'excellence', 'leadership', 'community')),
        points INTEGER DEFAULT 0,
        requirements TEXT,
        badge_color TEXT DEFAULT '#3B82F6',
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    await database.query(`
      CREATE TABLE IF NOT EXISTS user_achievements (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        achievement_id INTEGER NOT NULL REFERENCES achievements(id) ON DELETE CASCADE,
        awarded_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        event_id INTEGER REFERENCES events(id),
        notes TEXT,
        UNIQUE(user_id, achievement_id)
      )
    `);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤
    await database.query(`
      CREATE TABLE IF NOT EXISTS products (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        description TEXT,
        price DECIMAL(10,2) NOT NULL,
        stock_quantity INTEGER DEFAULT 0,
        category TEXT,
        image_url TEXT,
        is_active BOOLEAN DEFAULT true,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–∫–∞–∑–æ–≤
    await database.query(`
      CREATE TABLE IF NOT EXISTS orders (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        total_amount DECIMAL(10,2) NOT NULL,
        status TEXT DEFAULT 'pending' CHECK(status IN ('pending', 'processing', 'shipped', 'delivered', 'cancelled')),
        shipping_address TEXT,
        notes TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞–∫–∞–∑–∞
    await database.query(`
      CREATE TABLE IF NOT EXISTS order_items (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        order_id INTEGER NOT NULL REFERENCES orders(id) ON DELETE CASCADE,
        product_id INTEGER NOT NULL REFERENCES products(id),
        quantity INTEGER NOT NULL,
        price DECIMAL(10,2) NOT NULL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    await database.query('CREATE INDEX IF NOT EXISTS idx_users_login ON users(login)');
    await database.query('CREATE INDEX IF NOT EXISTS idx_events_status ON events(status)');
    await database.query('CREATE INDEX IF NOT EXISTS idx_events_start_date ON events(start_date)');
    await database.query('CREATE INDEX IF NOT EXISTS idx_event_registrations_event_id ON event_registrations(event_id)');
    await database.query('CREATE INDEX IF NOT EXISTS idx_event_registrations_user_id ON event_registrations(user_id)');
    await database.query('CREATE INDEX IF NOT EXISTS idx_user_achievements_user_id ON user_achievements(user_id)');
    await database.query('CREATE INDEX IF NOT EXISTS idx_orders_user_id ON orders(user_id)');

    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await addTestData();

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
}

async function addTestData() {
  console.log('üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    const existingUsers = await database.query('SELECT COUNT(*) as count FROM users');
    if (existingUsers.rows[0].count > 0) {
      console.log('‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
      return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const bcrypt = require('bcryptjs');
    const adminPassword = await bcrypt.hash('admin123', 12);
    
    await database.query(`
      INSERT INTO users (login, password, first_name, last_name, class_grade, class_letter, role)
      VALUES (?, ?, ?, ?, ?, ?, ?)
    `, ['admin', adminPassword, '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', '–°–∏—Å—Ç–µ–º—ã', 11, '–ê', 'admin']);

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    const studentPassword = await bcrypt.hash('student123', 12);
    await database.query(`
      INSERT INTO users (login, password, first_name, last_name, class_grade, class_letter)
      VALUES 
        (?, ?, ?, ?, ?, ?),
        (?, ?, ?, ?, ?, ?),
        (?, ?, ?, ?, ?, ?)
    `, [
      'ivanov', studentPassword, '–ò–≤–∞–Ω', '–ò–≤–∞–Ω–æ–≤', 10, '–ê',
      'petrov', studentPassword, '–ü–µ—Ç—Ä', '–ü–µ—Ç—Ä–æ–≤', 9, '–ë',
      'sidorova', studentPassword, '–ê–Ω–Ω–∞', '–°–∏–¥–æ—Ä–æ–≤–∞', 11, '–í'
    ]);

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
    await database.query(`
      INSERT INTO events (title, description, start_date, end_date, location, max_participants, created_by)
      VALUES (?, ?, ?, ?, ?, ?, ?)
    `, [
      '–®–∫–æ–ª—å–Ω–∞—è –æ–ª–∏–º–ø–∏–∞–¥–∞ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ',
      '–ï–∂–µ–≥–æ–¥–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ª–∏–º–ø–∏–∞–¥–∞ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤ 9-11 –∫–ª–∞—Å—Å–æ–≤',
      new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
      new Date(Date.now() + 7 * 24 * 60 * 60 * 1000 + 3 * 60 * 60 * 1000).toISOString(), // +3 —á–∞—Å–∞
      '–ê–∫—Ç–æ–≤—ã–π –∑–∞–ª',
      50,
      1
    ]);

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const achievements = [
      {
        title: '–ü–µ—Ä–≤–æ–µ —É—á–∞—Å—Ç–∏–µ',
        description: '–£—á–∞—Å—Ç–∏–µ –≤ –ø–µ—Ä–≤–æ–º —à–∫–æ–ª—å–Ω–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏',
        icon: 'üåü',
        type: 'participation',
        points: 10,
        badge_color: '#10B981'
      },
      {
        title: '–ê–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫',
        description: '–£—á–∞—Å—Ç–∏–µ –≤ 5 –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö',
        icon: 'üèÉ',
        type: 'participation',
        points: 50,
        badge_color: '#3B82F6'
      },
      {
        title: '–õ–∏–¥–µ—Ä',
        description: '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —à–∫–æ–ª—å–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
        icon: 'üëë',
        type: 'leadership',
        points: 100,
        badge_color: '#F59E0B'
      }
    ];

    for (const achievement of achievements) {
      await database.query(`
        INSERT INTO achievements (title, description, icon, type, points, badge_color)
        VALUES (?, ?, ?, ?, ?, ?)
      `, [achievement.title, achievement.description, achievement.icon, achievement.type, achievement.points, achievement.badge_color]);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã
    const products = [
      {
        name: '–®–∫–æ–ª—å–Ω–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞',
        description: '–£–¥–æ–±–Ω–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º —à–∫–æ–ª—ã',
        price: 15.99,
        stock_quantity: 100,
        category: '–û–¥–µ–∂–¥–∞'
      },
      {
        name: '–®–∫–æ–ª—å–Ω–∞—è –∫—Ä—É–∂–∫–∞',
        description: '–ö–µ—Ä–∞–º–∏—á–µ—Å–∫–∞—è –∫—Ä—É–∂–∫–∞ —Å —Å–∏–º–≤–æ–ª–∏–∫–æ–π —à–∫–æ–ª—ã',
        price: 8.99,
        stock_quantity: 50,
        category: '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã'
      },
      {
        name: '–ë–ª–æ–∫–Ω–æ—Ç —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º',
        description: '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –±–ª–æ–∫–Ω–æ—Ç –¥–ª—è –∑–∞–º–µ—Ç–æ–∫',
        price: 5.99,
        stock_quantity: 75,
        category: '–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è'
      }
    ];

    for (const product of products) {
      await database.query(`
        INSERT INTO products (name, description, price, stock_quantity, category)
        VALUES (?, ?, ?, ?, ?)
      `, [product.name, product.description, product.price, product.stock_quantity, product.category]);
    }

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');
    console.log('üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: admin / admin123');
    console.log('üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç—ã: ivanov, petrov, sidorova / student123');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  initDatabase()
    .then(() => {
      process.exit(0);
    })
    .catch((error) => {
      console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = { initDatabase, addTestData };