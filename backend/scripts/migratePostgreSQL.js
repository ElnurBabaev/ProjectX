#!/usr/bin/env node

require('dotenv').config();
const { Pool } = require('pg');

const pool = new Pool({
  host: process.env.DB_HOST,
  port: process.env.DB_PORT,
  database: process.env.DB_NAME,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
});

async function migrateDatabase() {
  try {
    console.log('üîß –ú–ò–ì–†–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–• POSTGRESQL');
    console.log('==================================');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É events
    try {
      await pool.query('ALTER TABLE events ADD COLUMN IF NOT EXISTS is_active BOOLEAN DEFAULT TRUE');
      console.log('‚úÖ –ü–æ–ª–µ is_active –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ events');
    } catch (error) {
      console.log('‚ö†Ô∏è –ü–æ–ª–µ is_active —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ events');
    }
    
    try {
      await pool.query('ALTER TABLE events RENAME COLUMN date TO start_date');
      console.log('‚úÖ –ü–æ–ª–µ date –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –≤ start_date –≤ events');
    } catch (error) {
      console.log('‚ö†Ô∏è –ü–æ–ª–µ start_date —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ events');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É products
    try {
      await pool.query('ALTER TABLE products ADD COLUMN IF NOT EXISTS is_available BOOLEAN DEFAULT TRUE');
      console.log('‚úÖ –ü–æ–ª–µ is_available –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ products');
    } catch (error) {
      console.log('‚ö†Ô∏è –ü–æ–ª–µ is_available —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ products');
    }
    
    try {
      await pool.query('ALTER TABLE products RENAME COLUMN name TO title');
      console.log('‚úÖ –ü–æ–ª–µ name –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –≤ title –≤ products');
    } catch (error) {
      console.log('‚ö†Ô∏è –ü–æ–ª–µ title —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ products');
    }
    
    // –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É event_participants –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ —Å–∫—Ä–∏–ø—Ç–∞–º–∏)
    try {
      await pool.query(`
        CREATE TABLE IF NOT EXISTS event_participants (
          id SERIAL PRIMARY KEY,
          user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
          event_id INTEGER REFERENCES events(id) ON DELETE CASCADE,
          registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          status VARCHAR(20) DEFAULT 'registered',
          points_awarded INTEGER DEFAULT 0,
          confirmed_at TIMESTAMP,
          UNIQUE(user_id, event_id)
        )
      `);
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ event_participants —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏');
    } catch (error) {
      console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ event_participants —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
    console.log('');
    console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ PostgreSQL:', error.message);
    console.error('–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  migrateDatabase()
    .then(() => {
      console.log('‚ú® –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
      process.exit(0);
    })
    .catch(err => {
      console.error('‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
      process.exit(1);
    });
}

module.exports = migrateDatabase;