const database = require('../config/database-sqlite');
const bcrypt = require('bcryptjs');

async function migrateToNewUserStructure() {
  try {
    console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
    const checkColumns = await database.query(`
      PRAGMA table_info(users)
    `);
    
    const columns = checkColumns.rows.map(row => row.name);
    console.log('–¢–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ users:', columns);

    // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    if (columns.includes('login') && columns.includes('first_name') && columns.includes('last_name')) {
      console.log('‚úÖ –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return;
    }

    console.log('üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    await database.query(`
      CREATE TABLE IF NOT EXISTS users_new (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        login TEXT UNIQUE NOT NULL,
        password TEXT NOT NULL,
        first_name TEXT NOT NULL,
        last_name TEXT NOT NULL,
        class_grade INTEGER NOT NULL CHECK (class_grade >= 5 AND class_grade <= 11),
        class_letter TEXT NOT NULL CHECK (class_letter IN ('–ê', '–ë', '–í', '–ì')),
        role TEXT DEFAULT 'student' CHECK(role IN ('student', 'admin')),
        avatar_url TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // –ï—Å–ª–∏ —Å—Ç–∞—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –º–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    if (columns.includes('username')) {
      console.log('üì¶ –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...');
      
      const oldUsers = await database.query('SELECT * FROM users');
      
      for (const user of oldUsers.rows) {
        // –ü–∞—Ä—Å–∏–º –ø–æ–ª–Ω–æ–µ –∏–º—è
        const nameParts = (user.full_name || '').split(' ');
        const firstName = nameParts[0] || '–ò–º—è';
        const lastName = nameParts.slice(1).join(' ') || '–§–∞–º–∏–ª–∏—è';
        
        // –ü–∞—Ä—Å–∏–º –∫–ª–∞—Å—Å
        const classMatch = (user.class || '10–ê').match(/(\d+)([–ê-–ì])/);
        const classGrade = classMatch ? parseInt(classMatch[1]) : 10;
        const classLetter = classMatch ? classMatch[2] : '–ê';
        
        await database.query(`
          INSERT INTO users_new (
            login, password, first_name, last_name, 
            class_grade, class_letter, role, 
            avatar_url, created_at, updated_at
          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        `, [
          user.username || `user_${user.id}`,
          user.password,
          firstName,
          lastName,
          classGrade,
          classLetter,
          user.role || 'student',
          user.avatar_url,
          user.created_at,
          user.updated_at
        ]);
      }
      
      console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${oldUsers.rows.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    }

    // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞ –∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    const existingUsers = await database.query('SELECT COUNT(*) as count FROM users_new');
    if (existingUsers.rows[0].count === 0) {
      console.log('üë§ –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
      
      const adminPassword = await bcrypt.hash('admin123', 12);
      await database.query(`
        INSERT INTO users_new (login, password, first_name, last_name, class_grade, class_letter, role)
        VALUES (?, ?, ?, ?, ?, ?, ?)
      `, ['admin', adminPassword, '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', '–°–∏—Å—Ç–µ–º—ã', 11, '–ê', 'admin']);

      const studentPassword = await bcrypt.hash('student123', 12);
      await database.query(`
        INSERT INTO users_new (login, password, first_name, last_name, class_grade, class_letter)
        VALUES 
          (?, ?, ?, ?, ?, ?),
          (?, ?, ?, ?, ?, ?),
          (?, ?, ?, ?, ?, ?)
      `, [
        'ivanov', studentPassword, '–ò–≤–∞–Ω', '–ò–≤–∞–Ω–æ–≤', 10, '–ê',
        'petrov', studentPassword, '–ü–µ—Ç—Ä', '–ü–µ—Ç—Ä–æ–≤', 9, '–ë',
        'sidorova', studentPassword, '–ê–Ω–Ω–∞', '–°–∏–¥–æ—Ä–æ–≤–∞', 11, '–í'
      ]);
      
      console.log('‚úÖ –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã');
    }

    // –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –Ω–æ–≤–æ–π
    if (columns.includes('username')) {
      await database.query('DROP TABLE users');
      console.log('üóëÔ∏è –°—Ç–∞—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞ —É–¥–∞–ª–µ–Ω–∞');
    }
    
    await database.query('ALTER TABLE users_new RENAME TO users');
    console.log('üîÑ –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞');

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å
    await database.query('CREATE INDEX IF NOT EXISTS idx_users_login ON users(login)');
    console.log('üìä –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω');

    console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
    console.log('   –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: admin / admin123');
    console.log('   –°—Ç—É–¥–µ–Ω—Ç—ã: ivanov, petrov, sidorova / student123');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  migrateToNewUserStructure()
    .then(() => {
      console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = { migrateToNewUserStructure };