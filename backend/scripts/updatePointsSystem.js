const database = require('../config/database-sqlite');

async function updateDatabaseForPointsSystem() {
  try {
    console.log('üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –±–∞–ª–ª–æ–≤...\n');

    // 1. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ points –∫ —Ç–∞–±–ª–∏—Ü–µ events
    console.log('üìÖ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ points –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º...');
    try {
      await database.query(`
        ALTER TABLE events ADD COLUMN points INTEGER DEFAULT 0
      `);
      console.log('‚úÖ –ü–æ–ª–µ points –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Ç–∞–±–ª–∏—Ü–µ events');
    } catch (error) {
      if (error.message.includes('duplicate column name')) {
        console.log('‚ÑπÔ∏è –ü–æ–ª–µ points —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ events');
      } else {
        throw error;
      }
    }

    // 2. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ total_points –∫ —Ç–∞–±–ª–∏—Ü–µ users
    console.log('üë§ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ total_points –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...');
    try {
      await database.query(`
        ALTER TABLE users ADD COLUMN total_points INTEGER DEFAULT 0
      `);
      console.log('‚úÖ –ü–æ–ª–µ total_points –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Ç–∞–±–ª–∏—Ü–µ users');
    } catch (error) {
      if (error.message.includes('duplicate column name')) {
        console.log('‚ÑπÔ∏è –ü–æ–ª–µ total_points —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ users');
      } else {
        throw error;
      }
    }

    // 3. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ points_awarded –∫ —Ç–∞–±–ª–∏—Ü–µ event_registrations
    console.log('üìù –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ points_awarded –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è–º...');
    try {
      await database.query(`
        ALTER TABLE event_registrations ADD COLUMN points_awarded INTEGER DEFAULT 0
      `);
      console.log('‚úÖ –ü–æ–ª–µ points_awarded –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Ç–∞–±–ª–∏—Ü–µ event_registrations');
    } catch (error) {
      if (error.message.includes('duplicate column name')) {
        console.log('‚ÑπÔ∏è –ü–æ–ª–µ points_awarded —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ event_registrations');
      } else {
        throw error;
      }
    }

    // 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –±–∞–ª–ª–∞–º–∏
    console.log('üéØ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–ª–ª—ã –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π...');
    const events = await database.query('SELECT id, title FROM events');
    
    for (const event of events.rows) {
      // –°–ª—É—á–∞–π–Ω—ã–µ –±–∞–ª–ª—ã –æ—Ç 10 –¥–æ 50 –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      const randomPoints = Math.floor(Math.random() * 41) + 10; // 10-50 –±–∞–ª–ª–æ–≤
      await database.query(
        'UPDATE events SET points = ? WHERE id = ?',
        [randomPoints, event.id]
      );
      console.log(`  - "${event.title}": ${randomPoints} –±–∞–ª–ª–æ–≤`);
    }

    // 5. –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—á–∞—Å—Ç–∏—è –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö
    console.log('üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω—É–ª—è–µ–º –≤—Å–µ –±–∞–ª–ª—ã
    await database.query('UPDATE users SET total_points = 0 WHERE role = "student"');
    
    // –ó–∞—Ç–µ–º —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—á–∞—Å—Ç–∏—è –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö
    const participations = await database.query(`
      SELECT 
        er.user_id,
        er.event_id,
        er.status,
        e.points as event_points,
        e.title as event_title,
        u.first_name,
        u.last_name
      FROM event_registrations er
      JOIN events e ON er.event_id = e.id
      JOIN users u ON er.user_id = u.id
      WHERE er.status IN ('attended', 'registered') AND u.role = 'student'
    `);

    const userPoints = {};
    
    for (const participation of participations.rows) {
      const userId = participation.user_id;
      const points = participation.event_points || 0;
      
      if (!userPoints[userId]) {
        userPoints[userId] = {
          name: `${participation.first_name} ${participation.last_name}`,
          total: 0,
          events: []
        };
      }
      
      userPoints[userId].total += points;
      userPoints[userId].events.push({
        title: participation.event_title,
        points: points,
        status: participation.status
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º points_awarded –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      await database.query(
        'UPDATE event_registrations SET points_awarded = ? WHERE user_id = ? AND event_id = ?',
        [points, userId, participation.event_id]
      );
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for (const [userId, userData] of Object.entries(userPoints)) {
      await database.query(
        'UPDATE users SET total_points = ? WHERE id = ?',
        [userData.total, userId]
      );
      console.log(`  - ${userData.name}: ${userData.total} –±–∞–ª–ª–æ–≤ –∑–∞ ${userData.events.length} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π`);
    }

    // 6. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –†–ï–ô–¢–ò–ù–ì–ê:');
    const newRanking = await database.query(`
      SELECT 
        u.first_name,
        u.last_name,
        u.class_grade,
        u.class_letter,
        u.total_points,
        COUNT(er.id) as events_participated
      FROM users u
      LEFT JOIN event_registrations er ON u.id = er.user_id AND er.status IN ('attended', 'registered')
      WHERE u.role = 'student'
      GROUP BY u.id, u.first_name, u.last_name, u.class_grade, u.class_letter, u.total_points
      ORDER BY u.total_points DESC, u.last_name ASC
    `);

    console.log('–†–µ–π—Ç–∏–Ω–≥ –ø–æ –±–∞–ª–ª–∞–º –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö:');
    newRanking.rows.forEach((user, index) => {
      console.log(`${index + 1}. ${user.first_name} ${user.last_name} (${user.class_grade}${user.class_letter}) - ${user.total_points} –±–∞–ª–ª–æ–≤ (${user.events_participated} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π)`);
    });

    console.log('\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –±–∞–ª–ª–æ–≤!');
    console.log('üéØ –¢–µ–ø–µ—Ä—å —Ä–µ–π—Ç–∏–Ω–≥ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –±–∞–ª–ª–∞—Ö –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö');
    console.log('üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –±–∞–ª–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    process.exit(0);
  }
}

updateDatabaseForPointsSystem();