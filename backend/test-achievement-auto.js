const AchievementChecker = require('./utils/achievementChecker');
const db = require('./config/database');

async function testPointsAndAchievements() {
  try {
    console.log('=== –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ—Å–ª–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ ===');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const userResult = await db.query('SELECT points, total_earned_points FROM users WHERE id = 1');
    const user = userResult.rows[0];
    console.log('–¢–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', user.points);
    console.log('–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:', user.total_earned_points);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ú–∏–ª–ª–∏–æ–Ω–µ—Ä" 
    const achievementResult = await db.query('SELECT * FROM achievements WHERE title = ?', ['–ú–∏–ª–ª–∏–æ–Ω–µ—Ä']);
    if (achievementResult.rows.length === 0) {
      console.log('–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ú–∏–ª–ª–∏–æ–Ω–µ—Ä" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º...');
      await db.query(
        'INSERT INTO achievements (title, description, icon, type, points, requirements, badge_color, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, datetime())',
        ['–ú–∏–ª–ª–∏–æ–Ω–µ—Ä', '–ó–∞—Ä–∞–±–æ—Ç–∞–ª 25000 –±–∞–ª–ª–æ–≤', 'üí∞', 'excellence', 150, '–ó–∞—Ä–∞–±–æ—Ç–∞–π 25000 –±–∞–ª–ª–æ–≤', '#FFD700']
      );
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º 5000 –±–∞–ª–ª–æ–≤ (–∏–º–∏—Ç–∏—Ä—É—è API)
    const pointsToAdd = 5000;
    const newPoints = user.points + pointsToAdd;
    const newTotalEarned = user.total_earned_points + pointsToAdd;
    
    await db.query(
      'UPDATE users SET points = ?, total_earned_points = ? WHERE id = 1', 
      [newPoints, newTotalEarned]
    );
    
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${pointsToAdd} –±–∞–ª–ª–æ–≤. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newPoints}`);
    console.log(`‚úÖ –ù–æ–≤—ã–π total_earned_points: ${newTotalEarned}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–∫–∞–∫ –≤ API)
    console.log('üèÜ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤...');
    const earnedAchievements = await AchievementChecker.checkAllAchievements(1);
    
    if (earnedAchievements.length > 0) {
      console.log(`‚ú® –ù–∞–π–¥–µ–Ω–æ –∏ –≤—ã–¥–∞–Ω–æ ${earnedAchievements.length} –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:`);
      earnedAchievements.forEach(a => {
        console.log(`- ${a.title} (${a.points} –±–∞–ª–ª–æ–≤): ${a.requirements}`);
      });
    } else {
      console.log('üìù –ù–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const finalUserResult = await db.query('SELECT points, total_earned_points FROM users WHERE id = 1');
    const finalUser = finalUserResult.rows[0];
    console.log('–§–∏–Ω–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã:', finalUser.points);
    console.log('–§–∏–Ω–∞–ª—å–Ω—ã–π total_earned_points:', finalUser.total_earned_points);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  } finally {
    process.exit(0);
  }
}

testPointsAndAchievements();