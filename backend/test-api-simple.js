#!/usr/bin/env node

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è curl –∏–ª–∏ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
const http = require('http');

const testEndpoints = [
  { path: '/api/health', method: 'GET' },
  { path: '/api', method: 'GET' },
  { path: '/api/events', method: 'GET' },
  { path: '/api/products', method: 'GET' },
  { path: '/api/achievements', method: 'GET' }
];

function testAPI(endpoint) {
  return new Promise((resolve) => {
    const options = {
      hostname: '127.0.0.1',
      port: 5000,
      path: endpoint.path,
      method: endpoint.method,
      timeout: 4000
    };

    const req = http.request(options, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        resolve({
          endpoint: endpoint.path,
          status: res.statusCode,
          success: res.statusCode < 400,
          data: data.substring(0, 100) + (data.length > 100 ? '...' : '')
        });
      });
    });

    req.on('error', () => {
      resolve({
        endpoint: endpoint.path,
        status: 'ERROR',
        success: false,
        data: 'Connection failed'
      });
    });

    req.on('timeout', () => {
      req.destroy();
      resolve({
        endpoint: endpoint.path,
        status: 'TIMEOUT',
        success: false,
        data: 'Request timeout'
      });
    });

    req.end();
  });
}

async function runTests() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –ê–†–•–ò–¢–ï–ö–¢–£–†–´');
  console.log('================================');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 5000...\n');
  
  for (const endpoint of testEndpoints) {
    const result = await testAPI(endpoint);
    const icon = result.success ? '‚úÖ' : '‚ùå';
    console.log(`${icon} ${endpoint.method} ${result.endpoint}`);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${result.status}`);
    if (result.data && result.success) {
      console.log(`   –û—Ç–≤–µ—Ç: ${result.data}`);
    }
    console.log('');
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ª–æ–≥–∏–Ω
  await new Promise((resolve) => {
  const payload = JSON.stringify({ login: 'admin', password: 'admin123' });
    const options = {
      hostname: '127.0.0.1',
      port: 5000,
      path: '/api/auth/login',
      method: 'POST',
      timeout: 5000,
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(payload)
      }
    };
    const req = http.request(options, (res) => {
      let body = '';
      res.on('data', (c) => body += c);
      res.on('end', () => {
        const ok = res.statusCode < 400;
        const icon = ok ? '‚úÖ' : '‚ùå';
        console.log(`${icon} POST /api/auth/login`);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${res.statusCode}`);
        try {
          const parsed = JSON.parse(body);
          console.log(`   –û—Ç–≤–µ—Ç: ${JSON.stringify({ message: parsed.message, hasToken: !!parsed.token, userLogin: parsed.user?.login })}`);
        } catch (e) {
          console.log(`   –¢–µ–ª–æ: ${body.substring(0, 120)}`);
        }
        console.log('');
        resolve();
      });
    });
    req.on('error', (e) => {
      console.log(`‚ùå POST /api/auth/login`);
      console.log(`   –û—à–∏–±–∫–∞: ${e.message}`);
      console.log('');
      resolve();
    });
    req.on('timeout', () => {
      req.destroy();
      console.log(`‚ùå POST /api/auth/login`);
      console.log('   –û—à–∏–±–∫–∞: timeout');
      console.log('');
      resolve();
    });
    req.write(payload);
    req.end();
  });
  
  console.log('üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
  const successCount = (await Promise.all(testEndpoints.map(testAPI)))
    .filter(r => r.success).length;
  
  if (successCount === testEndpoints.length) {
    console.log('‚úÖ –í—Å–µ endpoints —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
    console.log('üöÄ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.');
  } else if (successCount === 0) {
    console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
    console.log('   1. –ó–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä: node server-sqlite.js');
    console.log('   2. –î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –ø–æ—Ä—Ç 5000');
  } else {
    console.log(`‚ö†Ô∏è  –†–∞–±–æ—Ç–∞–µ—Ç ${successCount}/${testEndpoints.length} endpoints`);
    console.log('üîß –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —á–∞—Å—Ç–∏—á–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.');
  }
}

runTests().catch(console.error);