#!/usr/bin/env node

/**
 * –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –ª–æ–≥–∏–Ω–∞ –∫–∞–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
 */

const http = require('http');

async function testBrowserLikeLogin() {
  try {
    console.log('üåê –¢–µ—Å—Ç–∏—Ä—É—é –ª–æ–≥–∏–Ω –∫–∞–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ...');
    
    const loginData = JSON.stringify({
      login: 'admin',
      password: 'admin'
    });

    const options = {
      hostname: 'localhost',
      port: 5000,
      path: '/api/auth/login',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': loginData.length,
        'Origin': 'http://localhost:3000',
        'Referer': 'http://localhost:3000/',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Accept': 'application/json, text/plain, */*',
        'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
        'Connection': 'keep-alive'
      }
    };

    const response = await new Promise((resolve, reject) => {
      const req = http.request(options, (res) => {
        console.log(`üìä –°—Ç–∞—Ç—É—Å: ${res.statusCode}`);
        console.log(`üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:`);
        Object.entries(res.headers).forEach(([key, value]) => {
          console.log(`   ${key}: ${value}`);
        });
        
        let data = '';
        res.on('data', chunk => {
          data += chunk;
        });
        
        res.on('end', () => {
          resolve({
            status: res.statusCode,
            headers: res.headers,
            data: data
          });
        });
      });

      req.on('error', (err) => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${err.message}`);
        reject(err);
      });

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å...');
      console.log('üì¶ –î–∞–Ω–Ω—ã–µ:', loginData);
      req.write(loginData);
      req.end();
    });
        
    console.log(`\nüì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:`);
    console.log(response.data);
    
    if (response.status === 200) {
      console.log('\n‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω!');
      const result = JSON.parse(response.data);
      if (result.token) {
        console.log(`üéüÔ∏è –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: ${result.token.substring(0, 30)}...`);
        
        // –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä–∏–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è...');
        await testProfile(result.token);
      }
    } else {
      console.log(`\n‚ùå –õ–æ–≥–∏–Ω –Ω–µ—É–¥–∞—á–µ–Ω. –ö–æ–¥: ${response.status}`);
    }
    
  } catch (error) {
    console.error('üí• –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

async function testProfile(token) {
  const options = {
    hostname: 'localhost',
    port: 5000,
    path: '/api/auth/profile',
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Origin': 'http://localhost:3000',
      'Accept': 'application/json, text/plain, */*'
    }
  };

  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      console.log(`üìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ñ–∏–ª—è: ${res.statusCode}`);
      
      let data = '';
      res.on('data', chunk => {
        data += chunk;
      });
      
      res.on('end', () => {
        console.log(`üì• –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è: ${data.substring(0, 200)}...`);
        if (res.statusCode === 200) {
          console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        } else {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ${res.statusCode}`);
        }
        resolve(data);
      });
    });

    req.on('error', reject);
    req.end();
  });
}

testBrowserLikeLogin();