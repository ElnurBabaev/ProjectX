#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ Excel
 * –°–æ–∑–¥–∞—ë—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
 */

const db = require('./config/database-sqlite');
const bcrypt = require('bcryptjs');

async function createTestDataForExport() {
  try {
    console.log('üß™ –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ Excel...');

    // 1. –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç—É–¥–µ–Ω—Ç–æ–≤)
    const testUsers = [
      { login: 'test_student1', firstName: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', lastName: '–ò–≤–∞–Ω–æ–≤', grade: 9, letter: '–ê' },
      { login: 'test_student2', firstName: '–ú–∞—Ä–∏—è', lastName: '–ü–µ—Ç—Ä–æ–≤–∞', grade: 10, letter: '–ë' },
      { login: 'test_student3', firstName: '–î–º–∏—Ç—Ä–∏–π', lastName: '–°–∏–¥–æ—Ä–æ–≤', grade: 11, letter: '–í' },
      { login: 'test_student4', firstName: '–ê–Ω–Ω–∞', lastName: '–ö–æ–∑–ª–æ–≤–∞', grade: 9, letter: '–ê' },
      { login: 'test_student5', firstName: '–ú–∏—Ö–∞–∏–ª', lastName: '–ú–æ—Ä–æ–∑–æ–≤', grade: 10, letter: '–ì' }
    ];

    const hashedPassword = await bcrypt.hash('testpass123', 12);
    const userIds = [];

    for (const user of testUsers) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const existingUser = await db.query('SELECT id FROM users WHERE login = ?', [user.login]);
      
      if (existingUser.rows.length > 0) {
        console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.login} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ`);
        userIds.push(existingUser.rows[0].id);
      } else {
        console.log(`üë§ –°–æ–∑–¥–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.firstName} ${user.lastName} (${user.grade}${user.letter})`);
        const result = await db.query(`
          INSERT INTO users (login, password, first_name, last_name, class_grade, class_letter, role)
          VALUES (?, ?, ?, ?, ?, ?, 'student')
        `, [user.login, hashedPassword, user.firstName, user.lastName, user.grade, user.letter]);
        
        userIds.push(result.insertId);
      }
    }

    // 2. –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
    const testEvent = {
      title: '–¢–µ—Å—Ç–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞',
      description: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ Excel',
      startDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
      location: '–ê–∫—Ç–æ–≤—ã–π –∑–∞–ª',
      maxParticipants: 100,
      points: 50
    };

    console.log(`üé≠ –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: ${testEvent.title}`);
    const eventResult = await db.query(`
      INSERT INTO events (title, description, start_date, location, max_participants, points, created_by)
      VALUES (?, ?, ?, ?, ?, ?, ?)
    `, [testEvent.title, testEvent.description, testEvent.startDate, testEvent.location, testEvent.maxParticipants, testEvent.points, 1]);

    const eventId = eventResult.insertId;

    // 3. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
    console.log(`üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ...`);
    for (let i = 0; i < userIds.length; i++) {
      const userId = userIds[i];
      const status = i % 2 === 0 ? 'attended' : 'registered'; // –ø–æ–ª–æ–≤–∏–Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∞, –ø–æ–ª–æ–≤–∏–Ω–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞
      
      await db.query(`
        INSERT INTO event_registrations (event_id, user_id, status, registered_at)
        VALUES (?, ?, ?, datetime('now', '-${i} hours'))
      `, [eventId, userId, status]);

      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID ${userId} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: ${status}`);
    }

    console.log('\n‚ú® –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!');
    console.log(`üìä –°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ ID: ${eventId}`);
    console.log(`üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${userIds.length}`);
    console.log('\nüîó –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç:');
    console.log('1. –ó–∞–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å');
    console.log('2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–°–æ–±—ã—Ç–∏—è"');
    console.log('3. –ù–∞–π–¥–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ "–£—á–∞—Å—Ç–Ω–∏–∫–∏"');
    console.log('4. –í –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –æ–∫–Ω–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–≠–∫—Å–ø–æ—Ä—Ç"');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    process.exit(1);
  } finally {
    process.exit(0);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
createTestDataForExport();