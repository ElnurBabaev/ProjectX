#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ Excel
 */

const http = require('http');
const fs = require('fs');
const path = require('path');

async function testExportAPI() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É—é API —ç–Ω–¥–ø–æ–∏–Ω—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ Excel...');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const loginData = JSON.stringify({
      login: 'admin',
      password: 'admin123'
    });

    const loginOptions = {
      hostname: 'localhost',
      port: 5000,
      path: '/api/auth/login',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(loginData)
      }
    };

    console.log('üîë –ê–≤—Ç–æ—Ä–∏–∑—É—é—Å—å –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä...');
    
    const token = await new Promise((resolve, reject) => {
      const req = http.request(loginOptions, (res) => {
        let data = '';
        res.on('data', chunk => data += chunk);
        res.on('end', () => {
          try {
            const response = JSON.parse(data);
            if (response.token) {
              console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
              resolve(response.token);
            } else {
              reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω: ' + data));
            }
          } catch (err) {
            reject(err);
          }
        });
      });

      req.on('error', reject);
      req.write(loginData);
      req.end();
    });

    // –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞
    const exportOptions = {
      hostname: 'localhost',
      port: 5000,
      path: '/api/admin/events/5/export-participants', // ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    };

    console.log('üìä –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —ç–∫—Å–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏—è ID 5...');

    const exportData = await new Promise((resolve, reject) => {
      const req = http.request(exportOptions, (res) => {
        console.log(`üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${res.statusCode}`);
        console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', res.headers);

        if (res.statusCode !== 200) {
          let errorData = '';
          res.on('data', chunk => errorData += chunk);
          res.on('end', () => {
            reject(new Error(`API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É ${res.statusCode}: ${errorData}`));
          });
          return;
        }

        const chunks = [];
        res.on('data', chunk => chunks.push(chunk));
        res.on('end', () => {
          const buffer = Buffer.concat(chunks);
          console.log(`üì¶ –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º: ${buffer.length} –±–∞–π—Ç`);
          resolve(buffer);
        });
      });

      req.on('error', reject);
      req.end();
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const testFileName = path.join(__dirname, 'test-export.xlsx');
    fs.writeFileSync(testFileName, exportData);
    console.log(`üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫: ${testFileName}`);
    console.log('‚úÖ –¢–µ—Å—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API:', error.message);
    process.exit(1);
  }
}

testExportAPI();