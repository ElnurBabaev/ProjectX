#!/usr/bin/env node

const http = require('http');
const fs = require('fs');

async function testExportDirect() {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞
    const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsImlhdCI6MTc1NTQ3MDc1OCwiZXhwIjoxNzU2MDc1NTU4fQ.5I3CjFUm9xj0CEscUK5TvOP4kwTcqPb4kILjQMnpGgM';
    
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É—é —ç–∫—Å–ø–æ—Ä—Ç Excel —Å —Ç–æ–∫–µ–Ω–æ–º...');
    
    const options = {
      hostname: 'localhost',
      port: 5000,
      path: '/api/admin/events/5/export-participants',
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    };

    return new Promise((resolve, reject) => {
      const req = http.request(options, (res) => {
        console.log(`üìä –°—Ç–∞—Ç—É—Å: ${res.statusCode}`);
        console.log(`üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏:`, res.headers);
        
        if (res.statusCode !== 200) {
          let errorData = '';
          res.on('data', chunk => errorData += chunk);
          res.on('end', () => {
            console.log(`‚ùå –û—à–∏–±–∫–∞: ${errorData}`);
            reject(new Error(`–û—à–∏–±–∫–∞ ${res.statusCode}: ${errorData}`));
          });
          return;
        }
        
        const chunks = [];
        let totalSize = 0;
        
        res.on('data', chunk => {
          chunks.push(chunk);
          totalSize += chunk.length;
        });
        
        res.on('end', () => {
          const buffer = Buffer.concat(chunks);
          console.log(`üì¶ –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º: ${buffer.length} –±–∞–π—Ç`);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
          const fileName = 'test-participants-export.xlsx';
          fs.writeFileSync(fileName, buffer);
          console.log(`üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫: ${fileName}`);
          console.log('‚úÖ –≠–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω!');
          resolve(buffer);
        });
      });

      req.on('error', (err) => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${err.message}`);
        reject(err);
      });

      req.end();
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

testExportDirect();