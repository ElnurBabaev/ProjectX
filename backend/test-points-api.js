const http = require('http');

// –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
const postData = JSON.stringify({
  points: 5000
});

const options = {
  hostname: 'localhost',
  port: 5000,
  path: '/api/admin/users/1/update-points',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Content-Length': Buffer.byteLength(postData),
    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwibG9naW4iOiJhZG1pbiIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTczNDQ2MTMxMSwiZXhwIjoxNzM0NTQ3NzExfQ.9rKZH3vE8Qsz-Wg4qr5_q9eYXt5LsHJJH9nIQq8zZxE'
  }
};

console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤...');

const req = http.request(options, (res) => {
  console.log(`–°—Ç–∞—Ç—É—Å: ${res.statusCode}`);
  console.log(`–ó–∞–≥–æ–ª–æ–≤–∫–∏: ${JSON.stringify(res.headers)}`);
  
  let data = '';
  res.setEncoding('utf8');
  res.on('data', (chunk) => {
    data += chunk;
  });
  
  res.on('end', () => {
    console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:');
    try {
      const response = JSON.parse(data);
      console.log(JSON.stringify(response, null, 2));
    } catch (e) {
      console.log('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', data);
    }
  });
});

req.on('error', (e) => {
  console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${e.message}`);
});

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
req.write(postData);
req.end();