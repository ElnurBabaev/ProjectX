// –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ç–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
const http = require('http');

function testRegistrationHTTP() {
    const postData = JSON.stringify({
        username: 'testuser' + Date.now(),
        password: 'testpass123',
        full_name: '–¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        class: '9–ê'
    });

    const options = {
        hostname: 'localhost',
        port: 5000,
        path: '/api/auth/register',
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Content-Length': Buffer.byteLength(postData)
        }
    };

    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ HTTP...');
    console.log('üìù –î–∞–Ω–Ω—ã–µ:', postData);

    const req = http.request(options, (res) => {
        console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', res.statusCode);
        console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏:', res.headers);
        
        let data = '';
        res.on('data', (chunk) => {
            data += chunk;
        });
        
        res.on('end', () => {
            console.log('üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
            if (res.statusCode === 201) {
                console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
            } else {
                console.log('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
            }
        });
    });

    req.on('error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    });

    req.write(postData);
    req.end();
}

testRegistrationHTTP();