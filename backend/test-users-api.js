async function testUsersAPI() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /admin/users API...\n');
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ª–æ–≥–∏–Ω–∏–º—Å—è —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω
    const loginResponse = await fetch('http://localhost:5000/api/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ login: 'admin', password: 'admin123' })
    });
    
    const loginData = await loginResponse.json();
    const token = loginData.token;
    
    if (!token) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω');
      return;
    }
    
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    
    // –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const usersResponse = await fetch('http://localhost:5000/api/admin/users', {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (!usersResponse.ok) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ API: ${usersResponse.status} ${usersResponse.statusText}`);
      return;
    }
    
    const usersData = await usersResponse.json();
    
    console.log('üì§ –û—Ç–≤–µ—Ç API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    console.log(JSON.stringify(usersData, null, 2));
    
    if (usersData.users && usersData.users.length > 0) {
      const firstUser = usersData.users[0];
      console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
      console.log(`ID: ${firstUser.id}`);
      console.log(`–õ–æ–≥–∏–Ω: ${firstUser.login}`);
      console.log(`–ò–º—è: ${firstUser.first_name} ${firstUser.last_name}`);
      console.log(`–ö–ª–∞—Å—Å: ${firstUser.class_grade}${firstUser.class_letter}`);
      console.log(`–†–æ–ª—å: ${firstUser.role}`);
      console.log(`–ë–∞–ª–ª—ã: ${firstUser.points} (—Ç–∏–ø: ${typeof firstUser.points})`);
      console.log(`–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${firstUser.created_at}`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API:', error.message);
  }
}

testUsersAPI();