const axios = require('axios');
const bcrypt = require('bcryptjs');

async function testAchievementNotification() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö...');

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –∞–¥–º–∏–Ω–∞
    const adminLoginResponse = await axios.post('http://localhost:5000/api/auth/login', {
      login: 'admin',
      password: 'admin123'
    });

    const adminToken = adminLoginResponse.data.token;
    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞ —É—Å–ø–µ—à–Ω–∞');

    // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const achievementResponse = await axios.post('http://localhost:5000/api/achievements/1/award/2', {}, {
      headers: {
        'Authorization': `Bearer ${adminToken}`
      }
    });

    console.log('‚úÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–æ:', achievementResponse.data);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userLoginResponse = await axios.post('http://localhost:5000/api/auth/login', {
      login: 'ivanov',
      password: 'student123'
    });

    const userToken = userLoginResponse.data.token;

    const notificationsResponse = await axios.get('http://localhost:5000/api/notifications', {
      headers: {
        'Authorization': `Bearer ${userToken}`
      }
    });

    console.log('üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
    notificationsResponse.data.notifications.slice(0, 5).forEach(notification => {
      console.log(`- ${notification.type}: ${notification.title}`);
      console.log(`  ${notification.message}`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.response?.data || error.message);
  }
}

async function testEventConfirmationNotification() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É—á–∞—Å—Ç–∏—è...');

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –∞–¥–º–∏–Ω–∞
    const adminLoginResponse = await axios.post('http://localhost:5000/api/auth/login', {
      login: 'admin',
      password: 'admin123'
    });

    const adminToken = adminLoginResponse.data.token;
    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞ —É—Å–ø–µ—à–Ω–∞');

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
    const confirmResponse = await axios.post('http://localhost:5000/api/admin/events/1/confirm/2', {}, {
      headers: {
        'Authorization': `Bearer ${adminToken}`
      }
    });

    console.log('‚úÖ –£—á–∞—Å—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ:', confirmResponse.data);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userLoginResponse = await axios.post('http://localhost:5000/api/auth/login', {
      login: 'ivanov',
      password: 'student123'
    });

    const userToken = userLoginResponse.data.token;

    const notificationsResponse = await axios.get('http://localhost:5000/api/notifications', {
      headers: {
        'Authorization': `Bearer ${userToken}`
      }
    });

    console.log('üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:');
    notificationsResponse.data.notifications.slice(0, 5).forEach(notification => {
      console.log(`- ${notification.type}: ${notification.title}`);
      console.log(`  ${notification.message}`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.response?.data || error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
async function runTests() {
  await testAchievementNotification();
  console.log('\n' + '='.repeat(50) + '\n');
  await testEventConfirmationNotification();
}

runTests();