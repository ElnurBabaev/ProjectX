import React, { useState, useRef, useEffect } from 'react';
import { Upload, X, Loader2 } from 'lucide-react';
import toast from 'react-hot-toast';

interface ImageUploaderProps {
  currentImage?: string;
  onImageChange: (imageUrl: string) => void;
  label?: string;
  accept?: string;
}

const ImageUploader: React.FC<ImageUploaderProps> = ({
  currentImage,
  onImageChange,
  label = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
  accept = "image/*"
}) => {
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const getFullImageUrl = (url: string) => {
    if (!url) return '';
    if (url.startsWith('http')) return url; // —É–∂–µ –ø–æ–ª–Ω—ã–π URL
    if (url.startsWith('/uploads/')) return `http://localhost:5000${url}`; // –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    return url; // –≤–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞ –∏–ª–∏ —á—Ç–æ-—Ç–æ –µ—â–µ
  };

  const [uploading, setUploading] = useState(false);
  const [previewUrl, setPreviewUrl] = useState(getFullImageUrl(currentImage || ''));
  const [inputUrl, setInputUrl] = useState(currentImage || '');
  const fileInputRef = useRef<HTMLInputElement>(null);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ø—Ä–æ–ø–æ–º currentImage
  useEffect(() => {
    setPreviewUrl(getFullImageUrl(currentImage || ''));
    setInputUrl(currentImage || '');
  }, [currentImage]);

  const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    if (!file.type.startsWith('image/')) {
      toast.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (5MB)
    if (file.size > 5 * 1024 * 1024) {
      toast.error('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB');
      return;
    }

    setUploading(true);

    try {
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é —Å—Ä–∞–∑—É
      const objectUrl = URL.createObjectURL(file);
      setPreviewUrl(objectUrl);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const formData = new FormData();
      formData.append('image', file);

      const token = localStorage.getItem('token');
      const response = await fetch('http://localhost:5000/api/upload/upload-image', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`
        },
        body: formData
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
      }

      const data = await response.json();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º preview —Å –ø–æ–ª–Ω—ã–º URL, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
      setPreviewUrl(`http://localhost:5000${data.imageUrl}`);
      setInputUrl(data.imageUrl); // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
      onImageChange(data.imageUrl); // –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –ë–î
      
      toast.success('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
      setPreviewUrl(getFullImageUrl(currentImage || ''));
      setInputUrl(currentImage || '');
    } finally {
      setUploading(false);
    }
  };

  const handleUrlChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const url = event.target.value;
    setInputUrl(url);
    setPreviewUrl(getFullImageUrl(url));
    onImageChange(url);
  };

  const clearImage = () => {
    setPreviewUrl('');
    setInputUrl('');
    onImageChange('');
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  const openFileDialog = () => {
    fileInputRef.current?.click();
  };

  return (
    <div className="space-y-4">
      <label className="block text-sm font-medium text-gray-700">
        {label}
      </label>

      {/* –ü—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
      {previewUrl && (
        <div className="relative inline-block">
          <img
            src={`${previewUrl}?t=${Date.now()}`}
            alt="–ü—Ä–µ–≤—å—é"
            className="max-w-full h-48 object-cover rounded-lg border-2 border-gray-200"
            crossOrigin="anonymous"
            onLoad={() => {
              console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø—Ä–µ–≤—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', previewUrl);
            }}
            onError={() => {
              console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø—Ä–µ–≤—å—é:', previewUrl);
              // –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ fetch –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
              fetch(previewUrl)
                .then(response => {
                  console.log('üì° Fetch —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø—Ä–µ–≤—å—é:', response.status, response.statusText);
                  console.log('üì° Fetch –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–≤—å—é:', [...response.headers.entries()]);
                })
                .catch(fetchError => {
                  console.error('üì° Fetch –æ—à–∏–±–∫–∞ –¥–ª—è –ø—Ä–µ–≤—å—é:', fetchError);
                });
              setPreviewUrl('');
            }}
          />
          <button
            type="button"
            onClick={clearImage}
            className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 hover:bg-red-600 transition-colors"
          >
            <X className="w-4 h-4" />
          </button>
        </div>
      )}

      {/* –ö–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ */}
      <div className="flex flex-col space-y-3">
        {/* –ó–∞–≥—Ä—É–∑–∫–∞ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ */}
        <div>
          <input
            ref={fileInputRef}
            type="file"
            accept={accept}
            onChange={handleFileSelect}
            className="hidden"
          />
          <button
            type="button"
            onClick={openFileDialog}
            disabled={uploading}
            className="flex items-center justify-center w-full px-4 py-2 border-2 border-dashed border-gray-300 rounded-lg hover:border-blue-400 hover:bg-blue-50 transition-colors disabled:opacity-50"
          >
            {uploading ? (
              <>
                <Loader2 className="w-5 h-5 mr-2 animate-spin" />
                –ó–∞–≥—Ä—É–∂–∞–µ–º...
              </>
            ) : (
              <>
                <Upload className="w-5 h-5 mr-2 text-gray-500" />
                –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
              </>
            )}
          </button>
        </div>

        {/* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å */}
        <div className="flex items-center">
          <div className="flex-1 border-t border-gray-300"></div>
          <span className="px-4 text-sm text-gray-500">–∏–ª–∏</span>
          <div className="flex-1 border-t border-gray-300"></div>
        </div>

        {/* –í–≤–æ–¥ URL */}
        <div>
          <input
            type="url"
            placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
            value={inputUrl}
            onChange={handleUrlChange}
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>
      </div>

      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
      <p className="text-xs text-gray-500">
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, GIF. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5MB
      </p>
    </div>
  );
};

export default ImageUploader;