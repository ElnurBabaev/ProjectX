import React, { useState, useEffect } from 'react';
import {
  ShoppingBag, 
  Search, 
  Edit, 
  Trash2, 
  Plus, 
  Package,
  Star,
  DollarSign,
  X,
  Eye,
  EyeOff,
  List,
  Download
} from 'lucide-react';
import toast from 'react-hot-toast';
import ImageUploader from '../ImageUploader';

interface Product {
  id: number;
  name: string;
  description: string;
  price: number;
  category: string;
  imageUrl?: string;
  stock: number;
  active: boolean;
  purchaseCount?: number;
}

const ProductManagement: React.FC = () => {
  const API_BASE_URL = (import.meta as any).env?.VITE_API_URL || '/api';
  const API_ORIGIN = import.meta.env.PROD 
    ? 'https://api.schoolactive.ru' 
    : (API_BASE_URL.replace(/\/api\/?$/, '') || '');
  const [products, setProducts] = useState<Product[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [categoryFilter, setCategoryFilter] = useState('');
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const getFullImageUrl = (url: string) => {
    if (!url) return '';
    if (url.startsWith('http')) return url; // —É–∂–µ –ø–æ–ª–Ω—ã–π URL
    if (url.startsWith('/uploads/')) {
      const fullUrl = `${API_ORIGIN}${url}`;
      console.log('üîß –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ URL –≤ ProductManagement:', url, '‚Üí', fullUrl);
      return fullUrl;
    }
    return url; // –≤–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞ –∏–ª–∏ —á—Ç–æ-—Ç–æ –µ—â–µ
  };

  const [newProduct, setNewProduct] = useState({
    name: '',
    description: '',
    price: 10,
    category: '',
    imageUrl: '',
    stock: 50,
    active: true
  });

  const categories = ['–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è', '–û–¥–µ–∂–¥–∞', '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã', '–ö–Ω–∏–≥–∏', '–î—Ä—É–≥–æ–µ'];

  useEffect(() => {
    fetchProducts();
  }, []);

  const fetchProducts = async () => {
    try {
      const token = localStorage.getItem('token');
  // –ê–¥–º–∏–Ω-—ç–Ω–¥–ø–æ–∏–Ω—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã (–≤–∫–ª—é—á–∞—è —Å–∫—Ä—ã—Ç—ã–µ)
  const response = await fetch(`${API_BASE_URL}/admin/products`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤');
      
      const data = await response.json();
      // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ, —á—Ç–æ–±—ã –ø–æ–ª—è –±—ã–ª–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–º–∏
      const mapped: Product[] = (data.products || []).map((p: any) => ({
        id: p.id,
        name: p.name,
        description: p.description,
        price: p.price,
        category: p.category,
        imageUrl: p.image_url || '',
        stock: p.stock_quantity,
        active: p.is_active === 1 || p.is_active === true,
        purchaseCount: p.purchaseCount
      }));
      setProducts(mapped);
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤');
      console.error(error);
    } finally {
      setLoading(false);
    }
  };

  const createProduct = async () => {
    try {
      const token = localStorage.getItem('token');
    const response = await fetch(`${API_BASE_URL}/admin/products`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          name: newProduct.name,
          description: newProduct.description,
          price: newProduct.price,
          category: newProduct.category,
      imageUrl: newProduct.imageUrl,
      stock_quantity: newProduct.stock,
      active: newProduct.active
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞');
      }

      await fetchProducts();
      setShowCreateModal(false);
      setNewProduct({
        name: '',
        description: '',
        price: 10,
        category: '',
        imageUrl: '',
        stock: 50,
        active: true
      });
      toast.success('–¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error: any) {
      toast.error(error.message);
    }
  };

  const updateProduct = async () => {
    if (!selectedProduct) return;

    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:', {
      id: selectedProduct.id,
      data: {
        name: selectedProduct.name,
        description: selectedProduct.description,
        price: selectedProduct.price,
        category: selectedProduct.category,
        imageUrl: selectedProduct.imageUrl,
        stock_quantity: selectedProduct.stock,
        active: selectedProduct.active
      }
    });

    try {
      const token = localStorage.getItem('token');
    const response = await fetch(`${API_BASE_URL}/admin/products/${selectedProduct.id}`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          name: selectedProduct.name,
          description: selectedProduct.description,
          price: selectedProduct.price,
          category: selectedProduct.category,
      imageUrl: selectedProduct.imageUrl,
      stock_quantity: selectedProduct.stock,
      active: selectedProduct.active
        })
      });

      console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);

      if (!response.ok) {
        const errorData = await response.json();
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç API:', errorData);
        throw new Error(errorData.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞');
      }

      await fetchProducts();
      setShowEditModal(false);
      setSelectedProduct(null);
      toast.success('–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      setTimeout(() => {
        fetchProducts();
      }, 1000);
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
      toast.error(error.message);
    }
  };

  const deleteProduct = async (productId: number) => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?')) return;

    try {
      const token = localStorage.getItem('token');
  const response = await fetch(`${API_BASE_URL}/admin/products/${productId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞');
      }

      await fetchProducts();
      toast.success('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error: any) {
      toast.error(error.message);
    }
  };

  const toggleProductStatus = async (productId: number, active: boolean) => {
    try {
      const token = localStorage.getItem('token');
      // –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –ø–æ–ª–µ–π –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞
      const p = products.find(pr => pr.id === productId);
      if (!p) throw new Error('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ');

      const response = await fetch(`${API_BASE_URL}/admin/products/${productId}`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          name: p.name,
          description: p.description,
          price: p.price,
          category: p.category,
          imageUrl: p.imageUrl,
          stock_quantity: p.stock,
          active
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–≤–∞—Ä–∞');
      }

      await fetchProducts();
      toast.success(`–¢–æ–≤–∞—Ä ${active ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' : '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'}`);
    } catch (error: any) {
      toast.error(error.message);
    }
  };

  const viewPurchases = async (productId: number) => {
    try {
      const token = localStorage.getItem('token');
  const response = await fetch(`${API_BASE_URL}/admin/products/${productId}/purchases`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∫—É–ø–æ–∫');
      
      const data = await response.json();
      alert(`–ü–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞:\n${data.purchases.map((p: any) => `${p.firstName} ${p.lastName} - ${new Date(p.purchaseDate).toLocaleDateString('ru-RU')}`).join('\n')}`);
    } catch (error: any) {
      toast.error(error.message);
    }
  };

  const exportPurchases = async (productId: number, productName: string) => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        toast.error('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
        return;
      }

      const response = await fetch(`${API_BASE_URL}/admin/products/${productId}/export-purchases`, {
        headers: {
          'Authorization': `Bearer ${token}`,
        }
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ message: '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞' }));
        throw new Error(errorData.message || '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞');
      }

      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `–ü–æ–∫—É–ø–∫–∏_${productName.replace(/[^a-zA-Z–∞-—è–ê-–Ø0-9]/g, '_')}_${new Date().toISOString().split('T')[0]}.xlsx`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);

      toast.success('–ü–æ–∫—É–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error: any) {
      console.error('Error exporting purchases:', error);
      toast.error(error.message || '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–∫—É–ø–æ–∫');
    }
  };

  const filteredProducts = products.filter(product => {
    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         product.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         product.category.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesCategory = !categoryFilter || product.category === categoryFilter;
    return matchesSearch && matchesCategory;
  });

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-3">
          <ShoppingBag className="w-8 h-8 text-purple-600" />
          <h2 className="text-2xl font-bold text-gray-800">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏</h2>
        </div>
        <button
          onClick={() => setShowCreateModal(true)}
          className="flex items-center px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
        >
          <Plus className="w-4 h-4 mr-2" />
          –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
        </button>
      </div>

      {/* Filters */}
      <div className="bg-white rounded-lg p-4 shadow-sm border border-gray-200">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
            />
          </div>
          <select
            value={categoryFilter}
            onChange={(e) => setCategoryFilter(e.target.value)}
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
          >
            <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
            {categories.map(category => (
              <option key={category} value={category}>{category}</option>
            ))}
          </select>
        </div>
      </div>

      {/* Products Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {filteredProducts.map((product) => (
          <div key={product.id} className={`bg-white rounded-lg shadow-sm border overflow-hidden ${product.active ? 'border-gray-200' : 'border-red-200 opacity-75'}`}>
            {product.imageUrl && (
              <img
                src={`${getFullImageUrl(product.imageUrl)}?t=${Date.now()}`}
                alt={product.name}
                className="w-full h-48 object-cover"
                crossOrigin="anonymous"
                onLoad={() => {
                  console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∞–¥–º–∏–Ω–∫–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', product.imageUrl, '-> –ü–æ–ª–Ω—ã–π URL:', getFullImageUrl(product.imageUrl || ''));
                }}
                onError={(e) => {
                  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∞–¥–º–∏–Ω–∫–µ:', product.imageUrl, '-> –ü–æ–ª–Ω—ã–π URL:', getFullImageUrl(product.imageUrl || ''));
                  // –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ fetch –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                  fetch(getFullImageUrl(product.imageUrl || ''))
                    .then(response => {
                      console.log('üì° Fetch —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –≤ –∞–¥–º–∏–Ω–∫–µ:', response.status, response.statusText);
                    })
                    .catch(fetchError => {
                      console.error('üì° Fetch –æ—à–∏–±–∫–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –≤ –∞–¥–º–∏–Ω–∫–µ:', fetchError);
                    });
                  e.currentTarget.style.display = 'none';
                }}
              />
            )}
            <div className="p-6">
              <div className="flex items-start justify-between mb-2">
                <h3 className="text-lg font-semibold text-gray-800 flex-1">{product.name}</h3>
                <div className={`px-2 py-1 rounded-full text-xs font-medium ${product.active ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                  {product.active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                </div>
              </div>
              
              <p className="text-gray-600 text-sm mb-4 line-clamp-2">{product.description}</p>
              
              <div className="space-y-2 text-sm text-gray-500 mb-4">
                <div className="flex items-center justify-between">
                  <span className="flex items-center space-x-1">
                    <DollarSign className="w-4 h-4" />
                    <span>{product.price} –±–∞–ª–ª–æ–≤</span>
                  </span>
                  <span className="text-xs bg-gray-100 px-2 py-1 rounded">{product.category}</span>
                </div>
                <div className="flex items-center space-x-2">
                  <Package className="w-4 h-4" />
                  <span>–í –Ω–∞–ª–∏—á–∏–∏: {product.stock}</span>
                </div>
                {product.purchaseCount !== undefined && (
                  <div className="flex items-center space-x-2">
                    <Star className="w-4 h-4" />
                    <span>–ü—Ä–æ–¥–∞–Ω–æ: {product.purchaseCount}</span>
                  </div>
                )}
              </div>

              <div className="flex flex-wrap gap-2 items-center">
                {/* –ü–æ–∫—É–ø–∫–∏ */}
                <button
                  onClick={() => viewPurchases(product.id)}
                  className="w-9 h-9 flex items-center justify-center bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition-colors"
                  title="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–∫—É–ø–∫–∏"
                  aria-label="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–∫—É–ø–∫–∏"
                >
                  <List className="w-4 h-4" />
                </button>
                {/* –≠–∫—Å–ø–æ—Ä—Ç */}
                <button
                  onClick={() => exportPurchases(product.id, product.name)}
                  className="w-9 h-9 flex items-center justify-center bg-green-100 text-green-700 rounded-lg hover:bg-green-200 transition-colors"
                  title="–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∫—É–ø–∫–∏ –≤ Excel"
                  aria-label="–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∫—É–ø–∫–∏ –≤ Excel"
                >
                  <Download className="w-4 h-4" />
                </button>
                {/* –°–∫—Ä—ã—Ç—å/–ü–æ–∫–∞–∑–∞—Ç—å */}
                <button
                  onClick={() => toggleProductStatus(product.id, !product.active)}
                  className={`w-9 h-9 flex items-center justify-center rounded-lg transition-colors ${
                    product.active 
                      ? 'bg-red-100 text-red-700 hover:bg-red-200'
                      : 'bg-green-100 text-green-700 hover:bg-green-200'
                  }`}
                  title={product.active ? '–°–∫—Ä—ã—Ç—å —Ç–æ–≤–∞—Ä' : '–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä'}
                  aria-label={product.active ? '–°–∫—Ä—ã—Ç—å —Ç–æ–≤–∞—Ä' : '–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä'}
                >
                  {product.active ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                </button>
                {/* –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å */}
                <button
                  onClick={() => {
                    setSelectedProduct(product);
                    setShowEditModal(true);
                  }}
                  className="w-9 h-9 flex items-center justify-center text-purple-600 hover:bg-purple-50 rounded-lg transition-colors"
                  title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä"
                  aria-label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä"
                >
                  <Edit className="w-4 h-4" />
                </button>
                {/* –£–¥–∞–ª–∏—Ç—å */}
                <button
                  onClick={() => deleteProduct(product.id)}
                  className="w-9 h-9 flex items-center justify-center text-red-600 hover:bg-red-50 rounded-lg transition-colors"
                  title="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä"
                  aria-label="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä"
                >
                  <Trash2 className="w-4 h-4" />
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>

      {filteredProducts.length === 0 && !loading && (
        <div className="text-center py-12">
          <ShoppingBag className="w-12 h-12 text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-gray-900 mb-2">–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤</h3>
          <p className="text-gray-500">–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã</p>
        </div>
      )}

      {/* Create Product Modal */}
      {showCreateModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold">–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä</h3>
              <button
                onClick={() => setShowCreateModal(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                <X className="w-5 h-5" />
              </button>
            </div>
            <div className="space-y-4">
              <input
                type="text"
                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
                value={newProduct.name}
                onChange={(e) => setNewProduct({ ...newProduct, name: e.target.value })}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500"
              />
              <textarea
                placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
                value={newProduct.description}
                onChange={(e) => setNewProduct({ ...newProduct, description: e.target.value })}
                rows={3}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500"
              />
              <select
                value={newProduct.category}
                onChange={(e) => setNewProduct({ ...newProduct, category: e.target.value })}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500"
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
                {categories.map(category => (
                  <option key={category} value={category}>{category}</option>
                ))}
              </select>
              <input
                type="number"
                placeholder="–¶–µ–Ω–∞ –≤ –±–∞–ª–ª–∞—Ö"
                value={newProduct.price}
                onChange={(e) => setNewProduct({ ...newProduct, price: Number(e.target.value) })}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500"
              />
              <input
                type="number"
                placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –Ω–∞–ª–∏—á–∏–∏"
                value={newProduct.stock}
                onChange={(e) => setNewProduct({ ...newProduct, stock: Number(e.target.value) })}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500"
              />
              <ImageUploader
                currentImage={newProduct.imageUrl}
                onImageChange={(imageUrl) => setNewProduct({ ...newProduct, imageUrl })}
                label="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
              />
              <label className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  checked={newProduct.active}
                  onChange={(e) => setNewProduct({ ...newProduct, active: e.target.checked })}
                  className="rounded border-gray-300 text-purple-600 focus:ring-purple-500"
                />
                <span className="text-sm text-gray-700">–ê–∫—Ç–∏–≤–µ–Ω</span>
              </label>
            </div>
            <div className="flex space-x-4 mt-6">
              <button
                onClick={() => setShowCreateModal(false)}
                className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                onClick={createProduct}
                className="flex-1 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700"
              >
                –°–æ–∑–¥–∞—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Edit Product Modal */}
      {showEditModal && selectedProduct && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä</h3>
              <button
                onClick={() => setShowEditModal(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                <X className="w-5 h-5" />
              </button>
            </div>
            <div className="space-y-4">
              <input
                type="text"
                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
                value={selectedProduct.name}
                onChange={(e) => setSelectedProduct({ ...selectedProduct, name: e.target.value })}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500"
              />
              <textarea
                placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
                value={selectedProduct.description}
                onChange={(e) => setSelectedProduct({ ...selectedProduct, description: e.target.value })}
                rows={3}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500"
              />
              <select
                value={selectedProduct.category}
                onChange={(e) => setSelectedProduct({ ...selectedProduct, category: e.target.value })}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500"
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
                {categories.map(category => (
                  <option key={category} value={category}>{category}</option>
                ))}
              </select>
              <input
                type="number"
                placeholder="–¶–µ–Ω–∞ –≤ –±–∞–ª–ª–∞—Ö"
                value={selectedProduct.price}
                onChange={(e) => setSelectedProduct({ ...selectedProduct, price: Number(e.target.value) })}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500"
              />
              <input
                type="number"
                placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –Ω–∞–ª–∏—á–∏–∏"
                value={selectedProduct.stock}
                onChange={(e) => setSelectedProduct({ ...selectedProduct, stock: Number(e.target.value) })}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500"
              />
              <ImageUploader
                currentImage={selectedProduct.imageUrl || ''}
                onImageChange={(imageUrl) => setSelectedProduct({ ...selectedProduct, imageUrl })}
                label="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
              />
              <label className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  checked={selectedProduct.active}
                  onChange={(e) => setSelectedProduct({ ...selectedProduct, active: e.target.checked })}
                  className="rounded border-gray-300 text-purple-600 focus:ring-purple-500"
                />
                <span className="text-sm text-gray-700">–ê–∫—Ç–∏–≤–µ–Ω</span>
              </label>
            </div>
            <div className="flex space-x-4 mt-6">
              <button
                onClick={() => setShowEditModal(false)}
                className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                onClick={updateProduct}
                className="flex-1 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700"
              >
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ProductManagement;