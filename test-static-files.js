#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
 */

const http = require('http');
const fs = require('fs');
const path = require('path');

async function testStaticFiles() {
  try {
    console.log('üñºÔ∏è –¢–µ—Å—Ç–∏—Ä—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ uploads
    const uploadsPath = path.join(__dirname, 'backend', 'uploads');
    const files = fs.readdirSync(uploadsPath);
    
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ uploads: ${files.length}`);
    
    if (files.length === 0) {
      console.log('‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ñ–∞–π–ª–∞
    const testFiles = files.slice(0, 3);
    
    for (const filename of testFiles) {
      console.log(`\nüîç –¢–µ—Å—Ç–∏—Ä—É—é —Ñ–∞–π–ª: ${filename}`);
      
      const options = {
        hostname: 'localhost',
        port: 5000,
        path: `/uploads/${filename}`,
        method: 'GET'
      };

      try {
        const result = await new Promise((resolve, reject) => {
          const req = http.request(options, (res) => {
            console.log(`üìä –°—Ç–∞—Ç—É—Å: ${res.statusCode}`);
            console.log(`üìã Content-Type: ${res.headers['content-type']}`);
            console.log(`üìè Content-Length: ${res.headers['content-length']}`);
            
            if (res.statusCode === 200) {
              console.log('‚úÖ –§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω!');
            } else {
              console.log('‚ùå –§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            }
            
            resolve({ status: res.statusCode, headers: res.headers });
          });

          req.on('error', (err) => {
            console.log(`üí• –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${err.message}`);
            reject(err);
          });

          req.end();
        });
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è —Ñ–∞–π–ª–∞ ${filename}: ${error.message}`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–∞–∫–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    console.log('\nüåê –ü—Ä–æ–≤–µ—Ä—è—é CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏...');
    const corsOptions = {
      hostname: 'localhost',
      port: 5000,
      path: `/uploads/${testFiles[0]}`,
      method: 'GET',
      headers: {
        'Origin': 'http://localhost:3000'
      }
    };

    try {
      await new Promise((resolve, reject) => {
        const req = http.request(corsOptions, (res) => {
          console.log(`üîí Access-Control-Allow-Origin: ${res.headers['access-control-allow-origin']}`);
          console.log(`üîí Access-Control-Allow-Methods: ${res.headers['access-control-allow-methods']}`);
          
          if (res.headers['access-control-allow-origin']) {
            console.log('‚úÖ CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
          } else {
            console.log('‚ùå CORS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!');
          }
          
          resolve();
        });

        req.on('error', reject);
        req.end();
      });
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ CORS: ${error.message}`);
    }
    
  } catch (error) {
    console.error('üí• –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

testStaticFiles();